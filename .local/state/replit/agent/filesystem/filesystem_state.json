{"file_contents":{"design_guidelines.md":{"content":"# Jira UI Clone - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Exact 1:1 replica of Atlassian Jira's current interface, prioritizing pixel-perfect accuracy over creative interpretation.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Jira Blue: 216 100% 50% (primary actions, links)\n- Navy: 216 25% 15% (headers, primary text)\n- White: 0 0% 100% (backgrounds, cards)\n\n**Status Colors:**\n- Success Green: 120 50% 40%\n- Warning Orange: 35 85% 55%\n- Error Red: 0 70% 50%\n- In Progress Blue: 210 80% 60%\n\n**Neutral Grays:**\n- Text Primary: 0 0% 20%\n- Text Secondary: 0 0% 45%\n- Border Light: 0 0% 85%\n- Background Gray: 0 0% 97%\n\n### B. Typography\n**Primary Font**: Inter or system fonts\n- Headers: 600 weight, 16-24px\n- Body text: 400 weight, 14px\n- Labels: 500 weight, 12px\n- Code/IDs: Monospace, 12px\n\n### C. Layout System\n**Tailwind Spacing**: Use units 1, 2, 3, 4, 6, 8, 12, 16\n- Sidebar: Fixed 256px width\n- Content padding: p-4 to p-6\n- Card spacing: gap-4\n- Button padding: px-4 py-2\n\n### D. Component Library\n\n**Navigation:**\n- Left sidebar with project navigation tree\n- Top breadcrumb navigation\n- Global search bar in header\n- User avatar dropdown menu\n\n**Data Display:**\n- Kanban board columns with draggable cards\n- Issue cards showing key, summary, assignee, priority\n- Sprint planning boards with backlog\n- Issue detail panels with tabbed content\n\n**Forms & Inputs:**\n- Jira-style dropdowns with search\n- Rich text editor for descriptions\n- File upload areas\n- Date/time pickers matching Jira style\n\n**Overlays:**\n- Issue detail modal (full-screen on mobile)\n- Create issue modal\n- User picker dropdowns\n- Context menus for actions\n\n### E. Key UI Patterns\n\n**Issue Cards:**\n- White background with subtle shadows\n- Issue type icons (bug, story, epic)\n- Priority indicators (colored triangles)\n- Assignee avatars\n- Status labels with colored backgrounds\n\n**Kanban Board:**\n- Columns with gray headers\n- Drag-and-drop visual feedback\n- Column limits and WIP indicators\n- Swimlanes for epics/assignees\n\n**Sidebar Navigation:**\n- Collapsible project tree\n- Active state highlighting\n- Icon + text labels\n- Nested navigation for project sections\n\n## Images\nNo hero images required. Use only:\n- User avatar placeholders (circular, 32px)\n- Issue type icons from Material Icons\n- Priority indicator symbols\n- Project/company logos (small, in sidebar)\n- Attachment thumbnails in issue details\n\n## Specific Jira Features to Replicate\n- Exact Jira header with Atlassian branding\n- Project sidebar with identical navigation structure\n- Sprint planning interface\n- Issue creation modal with all field types\n- Comment threads with @mentions\n- Attachment handling UI\n- Activity feeds and notifications\n- Board configuration options\n\n**Critical**: Maintain Jira's exact visual hierarchy, spacing, and interaction patterns. Every component should be indistinguishable from the original Jira interface.","size_bytes":2940},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Jira UI Clone\n\n## Overview\n\nThis project is a pixel-perfect clone of Atlassian Jira's project management interface, built as a modern web application. The application focuses on replicating Jira's kanban board functionality, issue tracking system, and user interface components with exact visual fidelity. It features a React-based frontend with TypeScript, comprehensive UI components using shadcn/ui and Radix UI primitives, and drag-and-drop functionality for kanban boards.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Build System**: Vite for fast development and optimized production builds\n- **Styling**: Tailwind CSS with custom design tokens matching Jira's exact color palette and spacing\n- **Component Library**: shadcn/ui components built on Radix UI primitives for accessibility and consistency\n- **State Management**: React hooks with TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Drag & Drop**: @dnd-kit for accessible and performant kanban board interactions\n\n### Design System\n- **Color Palette**: Exact Jira color matching with CSS variables for theming\n- **Typography**: Inter font family with defined weight and size hierarchies\n- **Layout**: Tailwind spacing units (1, 2, 3, 4, 6, 8, 12, 16) for consistent spacing\n- **Components**: Comprehensive UI component library including cards, modals, forms, and navigation elements\n\n### Data Architecture\n- **Type System**: Shared TypeScript interfaces for Jira entities (User, Project, Issue, Comment)\n- **Issue Management**: Support for multiple issue types (story, bug, task, epic) with priority levels and status tracking\n- **Mock Data**: Frontend-only implementation with comprehensive mock data for development and demonstration\n\n### Application Structure\n- **Layout**: Three-panel layout with header, sidebar navigation, and main content area\n- **Kanban Board**: Drag-and-drop columns with issue cards showing key information\n- **Issue Management**: Full CRUD operations with modals for creating and editing issues\n- **Filtering**: Advanced filtering system by assignee, issue type, priority, status, and labels\n- **Navigation**: Project tree navigation with breadcrumbs and search functionality\n\n### Code Organization\n- **Modular Components**: Isolated, reusable components with clear interfaces\n- **Custom Hooks**: Shared logic for mobile detection, toast notifications, and form handling\n- **Utility Functions**: Centralized styling utilities and helper functions\n- **Type Safety**: Comprehensive TypeScript coverage with strict configuration\n\n## External Dependencies\n\n### UI Framework Dependencies\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives for building the component library\n- **@tanstack/react-query**: Server state management and caching for API interactions\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx** and **tailwind-merge**: Conditional CSS class management and Tailwind utility merging\n\n### Drag and Drop\n- **@dnd-kit/core**, **@dnd-kit/sortable**, **@dnd-kit/utilities**: Modern drag-and-drop toolkit for accessible kanban board functionality\n\n### Form Management\n- **react-hook-form**: Performant form library with validation\n- **@hookform/resolvers**: Validation schema resolvers for form validation\n- **zod**: TypeScript-first schema validation library\n\n### Development Tools\n- **Vite**: Next-generation frontend build tool for fast development and optimized builds\n- **TypeScript**: Static type checking for enhanced development experience\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n- **PostCSS**: CSS post-processing for Tailwind and autoprefixer\n\n### Database and Backend (Configured but Frontend-Only)\n- **@neondatabase/serverless**: Serverless PostgreSQL database driver (prepared for future backend integration)\n- **drizzle-orm**: Type-safe ORM for database operations (prepared for future backend integration)\n\n### Date and Time\n- **date-fns**: Modern JavaScript date utility library for formatting and manipulation\n\n### Additional Utilities\n- **cmdk**: Command palette component for search and navigation\n- **wouter**: Minimalist routing library for React applications","size_bytes":4413},"start-dev.sh":{"content":"#!/bin/bash\nnpx vite --host 0.0.0.0 --port 5000\n","size_bytes":48},"start-frontend.sh":{"content":"#!/bin/bash\nnpx vite --host 0.0.0.0 --port 5000\n","size_bytes":48},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        jira: {\n          // Issue type colors\n          bug: \"rgb(232 67 147)\",\n          story: \"rgb(34 197 94)\", \n          task: \"rgb(59 130 246)\",\n          epic: \"rgb(147 51 234)\",\n          // Priority colors\n          highest: \"rgb(239 68 68)\",\n          high: \"rgb(245 158 11)\",\n          medium: \"rgb(34 197 94)\",\n          low: \"rgb(34 197 94)\",\n          lowest: \"rgb(156 163 175)\",\n          // Status colors\n          todo: \"rgb(107 114 126)\",\n          \"in-progress\": \"rgb(0 101 255)\",\n          done: \"rgb(0 135 90)\",\n          // Jira brand colors\n          blue: \"rgb(0 101 255)\",\n          \"blue-light\": \"rgb(222 235 255)\",\n          \"blue-dark\": \"rgb(0 82 204)\",\n          \"gray-50\": \"rgb(250 251 252)\",\n          \"gray-100\": \"rgb(244 245 247)\",\n          \"gray-200\": \"rgb(223 225 229)\",\n          \"gray-300\": \"rgb(193 199 208)\",\n          \"gray-400\": \"rgb(151 160 175)\",\n          \"gray-500\": \"rgb(107 114 126)\",\n          \"gray-600\": \"rgb(68 84 111)\",\n          \"gray-700\": \"rgb(52 69 99)\",\n          \"gray-800\": \"rgb(37 56 88)\",\n          \"gray-900\": \"rgb(22 43 77)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5152},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1117},"shared/types.ts":{"content":"// Jira data types for frontend-only mock data\nexport interface JiraUser {\n  id: string;\n  name: string;\n  email: string;\n  avatarUrl?: string;\n  initials: string;\n}\n\nexport interface JiraProject {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  lead: JiraUser;\n  category: string;\n  type: 'software' | 'business';\n  avatarUrl?: string;\n  githubUrl?: string;\n  ProjectUrl?: string;\n}\n\nexport type IssueType = 'story' | 'bug' | 'task' | 'epic';\nexport type IssuePriority = 'highest' | 'high' | 'medium' | 'low' | 'lowest';\nexport type IssueStatus = 'to-do' | 'in-progress' | 'done';\n\nexport interface JiraIssue {\n  id: string;\n  key: string;\n  summary: string;\n  description: string;\n  type: IssueType;\n  priority: IssuePriority;\n  status: IssueStatus;\n  assignee?: JiraUser;\n  reporter: JiraUser;\n  project: JiraProject;\n  storyPoints?: number;\n  createdAt: string;\n  updatedAt: string;\n  labels: string[];\n  comments: JiraComment[];\n}\n\nexport interface JiraComment {\n  id: string;\n  author: JiraUser;\n  body: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface JiraSprint {\n  id: string;\n  name: string;\n  state: 'future' | 'active' | 'closed';\n  startDate?: string;\n  endDate?: string;\n  completeDate?: string;\n  goal?: string;\n  issues: JiraIssue[];\n}\n\nexport interface KanbanColumn {\n  id: string;\n  title: string;\n  status: IssueStatus;\n  issues: JiraIssue[];\n  limit?: number;\n}","size_bytes":1424},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { WorkflowProvider } from \"@/contexts/WorkflowContext\";\nimport StartupOverlay from \"@/components/StartupOverlay\";\nimport Board from \"@/pages/Board\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Backlog from \"@/pages/Backlog\";\nimport Code from \"@/pages/Code\";\nimport Releases from \"@/pages/Releases\";\nimport Roadmap from \"@/pages/Roadmap\";\nimport Notifications from \"@/pages/Notifications\";\nimport ProjectSettings from \"@/pages/ProjectSettings\";\nimport Help from \"@/pages/Help\";\nimport YourWork from \"@/pages/YourWork\";\nimport Projects from \"@/pages/Projects\";\nimport Filters from \"@/pages/Filters\";\nimport Teams from \"@/pages/Teams\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Board} />\n      <Route path=\"/board\" component={Board} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/backlog\" component={Backlog} />\n      <Route path=\"/code\" component={Code} />\n      <Route path=\"/releases\" component={Releases} />\n      <Route path=\"/roadmap\" component={Roadmap} />\n      <Route path=\"/notifications\" component={Notifications} />\n      <Route path=\"/settings\" component={ProjectSettings} />\n      <Route path=\"/help\" component={Help} />\n      <Route path=\"/your-work\" component={YourWork} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/filters\" component={Filters} />\n      <Route path=\"/teams\" component={Teams} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <WorkflowProvider>\n          <Toaster />\n          <StartupOverlay />\n          <Router />\n        </WorkflowProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2089},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 216 25% 15%;\n\n  --border: 0 0% 85%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 216 25% 15%;\n\n  --card-border: 0 0% 92%;\n\n  --sidebar: 0 0% 97%;\n\n  --sidebar-foreground: 216 25% 15%;\n\n  --sidebar-border: 0 0% 90%;\n\n  --sidebar-primary: 216 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 0 0% 94%;\n\n  --sidebar-accent-foreground: 216 25% 15%;\n\n  --sidebar-ring: 216 100% 50%;\n\n  --popover: 0 0% 95%;\n\n  --popover-foreground: 216 25% 15%;\n\n  --popover-border: 0 0% 88%;\n\n  --primary: 216 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 216 25% 15%;\n\n  --muted: 0 0% 94%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 0 0% 93%;\n\n  --accent-foreground: 216 25% 15%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 75%;\n  --ring: 216 100% 50%;\n  --chart-1: 216 100% 40%;\n  --chart-2: 120 50% 40%;\n  --chart-3: 35 85% 55%;\n  --chart-4: 280 60% 50%;\n  --chart-5: 200 80% 45%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", Consolas, \"Monaco\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 6px 16px -4px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 216 6% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 216 6% 15%;\n\n  --card: 216 5% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 216 6% 16%;\n\n  --sidebar: 216 6% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 216 6% 18%;\n\n  --sidebar-primary: 216 100% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 216 5% 16%;\n\n  --sidebar-accent-foreground: 0 0% 85%;\n\n  --sidebar-ring: 216 100% 60%;\n\n  --popover: 216 5% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 216 6% 20%;\n\n  --primary: 216 100% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 216 5% 18%;\n\n  --secondary-foreground: 0 0% 85%;\n\n  --muted: 216 5% 16%;\n\n  --muted-foreground: 0 0% 60%;\n\n  --accent: 216 5% 17%;\n\n  --accent-foreground: 0 0% 85%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 216 6% 25%;\n  --ring: 216 100% 60%;\n  --chart-1: 216 100% 65%;\n  --chart-2: 120 50% 60%;\n  --chart-3: 35 85% 65%;\n  --chart-4: 280 60% 70%;\n  --chart-5: 200 80% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -2px hsl(0 0% 0% / 0.4);\n  --shadow-md: 0px 6px 16px -4px hsl(0 0% 0% / 0.4), 0px 4px 6px -2px hsl(0 0% 0% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.4), 0px 8px 10px -6px hsl(0 0% 0% / 0.4);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Smooth scrolling for better UX */\n  html {\n    scroll-behavior: smooth;\n  }\n  \n  /* Better touch interactions on mobile */\n  @media (hover: none) and (pointer: coarse) {\n    button, a, [role=\"button\"] {\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);\n    }\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n/* Shimmer animation for Code tab */\n@keyframes shimmer {\n  0% {\n    background-position: -200% center;\n  }\n  100% {\n    background-position: 200% center;\n  }\n}\n\n@keyframes gradient-shift {\n  0%, 100% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n}\n\n.animate-shimmer {\n  background: linear-gradient(\n    90deg,\n    transparent 0%,\n    rgba(59, 130, 246, 0.8) 25%,\n    rgba(147, 51, 234, 0.8) 50%,\n    rgba(236, 72, 153, 0.8) 75%,\n    transparent 100%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 3s ease-in-out infinite;\n}\n\n.gradient-text {\n  background: linear-gradient(\n    90deg,\n    #3b82f6,\n    #8b5cf6,\n    #ec4899,\n    #3b82f6\n  );\n  background-size: 200% auto;\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  animation: gradient-shift 3s ease infinite;\n  font-weight: 600;\n}","size_bytes":11228},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BoardHeader.tsx":{"content":"import { useState } from 'react';\nimport { Search, MoreHorizontal, Users, Settings, Share, Star, Plus } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport { mockUsers, mockSprints } from '@/data/mockData';\nimport FilterDropdown, { FilterOptions } from './FilterDropdown';\nimport { JiraIssue } from '@shared/types';\n\ninterface BoardHeaderProps {\n  boardName?: string;\n  sprintName?: string;\n  onSearch?: (query: string) => void;\n  onFilterChange?: (filters: FilterOptions) => void;\n  onCreateIssue?: () => void;\n  filters?: FilterOptions;\n  issues?: JiraIssue[];\n}\n\nexport default function BoardHeader({ \n  boardName = 'Active sprints', \n  sprintName,\n  onSearch,\n  onFilterChange,\n  onCreateIssue,\n  filters,\n  issues = []\n}: BoardHeaderProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isStarred, setIsStarred] = useState(false);\n  \n  const activeSprint = mockSprints.find(s => s.state === 'active'); // todo: remove mock functionality\n  const assignedUsers = mockUsers.slice(0, 3); // todo: remove mock functionality\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    onSearch?.(value);\n  };\n\n  const handleStarToggle = () => {\n    setIsStarred(!isStarred);\n    console.log(`Board ${isStarred ? 'unstarred' : 'starred'}`);\n  };\n\n  return (\n    <div className=\"bg-white border-b border-jira-gray-200 px-3 sm:px-4 md:px-6 py-3 sm:py-4\">\n      {/* Top row - Board title and actions */}\n      <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\n        <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n          <h1 className=\"text-xl sm:text-2xl font-semibold text-jira-gray-900 truncate\" data-testid=\"text-board-title\">\n            {boardName}\n          </h1>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleStarToggle}\n            className={`h-7 w-7 sm:h-8 sm:w-8 flex-shrink-0 transition-colors ${isStarred ? 'text-yellow-500' : 'text-jira-gray-400 hover:text-yellow-500'}`}\n            data-testid=\"button-star-board\"\n          >\n            <Star className={`h-4 w-4 ${isStarred ? 'fill-current' : ''}`} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Sprint info */}\n      {activeSprint && (\n        <div className=\"mb-3 sm:mb-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center space-y-2 sm:space-y-0 sm:space-x-4\">\n            <div className=\"flex items-center space-x-2 sm:space-x-3\">\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 border-green-200 text-xs\" data-testid=\"badge-sprint-status\">\n                Active Sprint\n              </Badge>\n              <span className=\"text-sm font-medium text-jira-gray-900 truncate\" data-testid=\"text-sprint-name\">\n                {activeSprint.name}\n              </span>\n            </div>\n            <span className=\"text-xs sm:text-sm text-jira-gray-500\" data-testid=\"text-sprint-dates\">\n              {activeSprint.startDate && activeSprint.endDate && (\n                `${new Date(activeSprint.startDate).toLocaleDateString()} - ${new Date(activeSprint.endDate).toLocaleDateString()}`\n              )}\n            </span>\n          </div>\n          {activeSprint.goal && (\n            <p className=\"text-xs sm:text-sm text-jira-gray-600 mt-2\" data-testid=\"text-sprint-goal\">\n              <strong>Sprint goal:</strong> {activeSprint.goal}\n            </p>\n          )}\n        </div>\n      )}\n\n      {/* Filter and search row */}\n      <div className=\"flex flex-col gap-3\">\n        <div className=\"flex items-center gap-2 min-w-0\">\n          {/* Search */}\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-jira-gray-400 h-4 w-4 pointer-events-none\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search this board\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              className=\"pl-10 pr-4 py-2 w-full h-9 sm:h-10 bg-white border-jira-gray-200 focus:border-jira-blue focus:ring-jira-blue text-sm transition-colors\"\n              data-testid=\"input-board-search\"\n            />\n          </div>\n\n          {/* Filters and Create Button */}\n          <div className=\"flex items-center gap-2 flex-shrink-0\">\n            {filters && onFilterChange && (\n              <FilterDropdown \n                filters={filters}\n                onFiltersChange={onFilterChange}\n                issues={issues}\n              />\n            )}\n            {onCreateIssue && (\n              <Button \n                onClick={onCreateIssue}\n                size=\"sm\"\n                className=\"bg-jira-blue hover:bg-jira-blue-dark text-white h-9 sm:h-10 transition-colors\"\n                data-testid=\"button-create-issue\"\n              >\n                <Plus className=\"h-4 w-4 sm:mr-1\" />\n                <span className=\"hidden sm:inline\">Create</span>\n              </Button>\n            )}\n          </div>\n        </div>\n        \n\n        {/* Assigned team members */}\n        <div className=\"flex items-center space-x-2 sm:space-x-3\">\n          <span className=\"text-xs sm:text-sm text-jira-gray-500 flex-shrink-0\">Assignees:</span>\n          <div className=\"flex -space-x-1 sm:-space-x-2\">\n            {assignedUsers.slice(0, 3).map((user, index) => (\n              <Avatar \n                key={user.id} \n                className=\"h-7 w-7 sm:h-8 sm:w-8 border-2 border-white hover:z-10 relative cursor-pointer transition-transform hover:scale-110\"\n                data-testid={`avatar-assignee-${user.id}`}\n              >\n                <AvatarImage src={user.avatarUrl} alt={user.name} />\n                <AvatarFallback className=\"bg-jira-blue text-white text-xs font-medium\">\n                  {user.initials}\n                </AvatarFallback>\n              </Avatar>\n            ))}\n            {assignedUsers.length > 3 && (\n              <div className=\"h-7 w-7 sm:h-8 sm:w-8 rounded-full bg-jira-gray-200 border-2 border-white flex items-center justify-center\">\n                <span className=\"text-xs text-jira-gray-600\">+{assignedUsers.length - 3}</span>\n              </div>\n            )}\n            <Link href=\"/teams\">\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                className=\"h-7 w-7 sm:h-8 sm:w-8 rounded-full border-2 border-white bg-jira-gray-100 hover:bg-jira-gray-200 transition-colors\"\n                data-testid=\"button-add-assignee\"\n              >\n                <span className=\"text-xs text-jira-gray-600\">+</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7170},"client/src/components/CreateIssueModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Bug, CheckSquare, Square, Zap } from \"lucide-react\";\nimport { mockUsers } from \"@/data/mockData\";\n\ninterface CreateIssueModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (issue: {\n    summary: string;\n    description: string;\n    type: string;\n    priority: string;\n    assignee: string;\n    storyPoints?: number;\n  }) => void;\n}\n\nconst issueTypes = [\n  { value: \"story\", label: \"Story\", icon: Square, color: \"text-green-500\" },\n  { value: \"bug\", label: \"Bug\", icon: Bug, color: \"text-red-500\" },\n  { value: \"task\", label: \"Task\", icon: CheckSquare, color: \"text-blue-500\" },\n  { value: \"epic\", label: \"Epic\", icon: Zap, color: \"text-purple-500\" },\n];\n\nconst priorities = [\n  { value: \"lowest\", label: \"Lowest\" },\n  { value: \"low\", label: \"Low\" },\n  { value: \"medium\", label: \"Medium\" },\n  { value: \"high\", label: \"High\" },\n  { value: \"highest\", label: \"Highest\" },\n];\n\n// Use mockUsers for assignee options\nconst assignees = mockUsers.map(user => ({\n  value: user.id,\n  label: user.name\n}));\n\nexport default function CreateIssueModal({ open, onClose, onSubmit }: CreateIssueModalProps) {\n  const [formData, setFormData] = useState({\n    summary: \"\",\n    description: \"\",\n    type: \"\",\n    priority: \"medium\",\n    assignee: \"\",\n    storyPoints: \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      ...formData,\n      storyPoints: formData.storyPoints ? parseInt(formData.storyPoints) : undefined,\n    });\n    setFormData({\n      summary: \"\",\n      description: \"\",\n      type: \"\",\n      priority: \"medium\",\n      assignee: \"\",\n      storyPoints: \"\",\n    });\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[95vh] sm:max-h-[90vh] overflow-y-auto\" data-testid=\"modal-create-issue\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg sm:text-xl\">Create Issue</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"issue-type\" className=\"text-sm\">Issue Type *</Label>\n              <Select \n                value={formData.type} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                required\n              >\n                <SelectTrigger data-testid=\"select-issue-type\" className=\"h-10\">\n                  <SelectValue placeholder=\"Select issue type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {issueTypes.map(type => {\n                    const IconComponent = type.icon;\n                    return (\n                      <SelectItem key={type.value} value={type.value}>\n                        <div className=\"flex items-center gap-2\">\n                          <IconComponent className={`w-4 h-4 ${type.color}`} />\n                          {type.label}\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\" className=\"text-sm\">Priority</Label>\n              <Select \n                value={formData.priority} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, priority: value }))}\n              >\n                <SelectTrigger data-testid=\"select-priority\" className=\"h-10\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {priorities.map(priority => (\n                    <SelectItem key={priority.value} value={priority.value}>\n                      {priority.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"summary\">Summary *</Label>\n            <Input\n              id=\"summary\"\n              value={formData.summary}\n              onChange={(e) => setFormData(prev => ({ ...prev, summary: e.target.value }))}\n              placeholder=\"Enter a brief summary of the issue\"\n              required\n              data-testid=\"input-summary\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Describe the issue in detail\"\n              className=\"min-h-32\"\n              data-testid=\"textarea-description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"assignee\">Assignee</Label>\n              <Select \n                value={formData.assignee} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, assignee: value }))}\n              >\n                <SelectTrigger data-testid=\"select-assignee\">\n                  <SelectValue placeholder=\"Unassigned\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {assignees.map(assignee => (\n                    <SelectItem key={assignee.value} value={assignee.value}>\n                      {assignee.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"story-points\">Story Points</Label>\n              <Input\n                id=\"story-points\"\n                type=\"number\"\n                value={formData.storyPoints}\n                onChange={(e) => setFormData(prev => ({ ...prev, storyPoints: e.target.value }))}\n                placeholder=\"0\"\n                min=\"0\"\n                max=\"100\"\n                data-testid=\"input-story-points\"\n              />\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-create-issue\">\n              Create Issue\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7051},"client/src/components/FilterDropdown.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Filter, X, Tag, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { JiraIssue, IssueStatus } from '@shared/types';\n\nexport interface FilterOptions {\n  statuses: IssueStatus[];\n  labels: string[];\n}\n\ninterface FilterDropdownProps {\n  filters: FilterOptions;\n  onFiltersChange: (filters: FilterOptions) => void;\n  issues: JiraIssue[];\n}\n\n\nconst STATUS_CONFIG = {\n  'to-do': { icon: <Clock className=\"h-3 w-3 text-gray-500\" />, label: 'To Do', color: 'text-gray-500' },\n  'in-progress': { icon: <AlertCircle className=\"h-3 w-3 text-blue-600\" />, label: 'In Progress', color: 'text-blue-600' },\n  done: { icon: <CheckCircle className=\"h-3 w-3 text-green-600\" />, label: 'Done', color: 'text-green-600' },\n};\n\nexport default function FilterDropdown({ filters, onFiltersChange, issues }: FilterDropdownProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState('status');\n\n  // Extract unique values from issues for filter options\n  const uniqueLabels = Array.from(new Set(issues.flatMap(issue => issue.labels || [])));\n\n  // Count active filters\n  const activeFilterCount = Object.values(filters).reduce((count, filterValues) => {\n    if (Array.isArray(filterValues)) {\n      return count + filterValues.length;\n    }\n    return count + (filterValues ? 1 : 0);\n  }, 0);\n\n  const updateFilters = (updates: Partial<FilterOptions>) => {\n    onFiltersChange({ ...filters, ...updates });\n  };\n\n  const clearAllFilters = () => {\n    onFiltersChange({\n      statuses: [],\n      labels: [],\n    });\n    setIsOpen(false);\n  };\n\n\n  const handleStatusToggle = (status: IssueStatus, checked: boolean) => {\n    const newStatuses = checked\n      ? [...filters.statuses, status]\n      : filters.statuses.filter(s => s !== status);\n    updateFilters({ statuses: newStatuses });\n  };\n\n  const handleLabelToggle = (label: string, checked: boolean) => {\n    const newLabels = checked\n      ? [...filters.labels, label]\n      : filters.labels.filter(l => l !== label);\n    updateFilters({ labels: newLabels });\n  };\n\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          className=\"relative\"\n          data-testid=\"button-filter\"\n        >\n          <Filter className=\"h-4 w-4 mr-2\" />\n          Filter\n          {activeFilterCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs\"\n              data-testid=\"badge-active-filters\"\n            >\n              {activeFilterCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-80 p-0\" align=\"start\" data-testid=\"popover-filter\">\n        <div className=\"p-4 border-b border-jira-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium text-jira-gray-900\">Filters</h3>\n            {activeFilterCount > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={clearAllFilters}\n                className=\"text-jira-gray-500 hover:text-jira-gray-700\"\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"h-4 w-4 mr-1\" />\n                Clear all\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 p-0 h-auto bg-transparent\">\n            <TabsTrigger \n              value=\"status\" \n              className=\"text-xs py-2 data-[state=active]:bg-jira-blue data-[state=active]:text-white\"\n              data-testid=\"tab-status\"\n            >\n              <CheckCircle className=\"h-3 w-3 mr-1\" />\n              Status\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"skills\" \n              className=\"text-xs py-2 data-[state=active]:bg-jira-blue data-[state=active]:text-white\"\n              data-testid=\"tab-skills\"\n            >\n              <Tag className=\"h-3 w-3 mr-1\" />\n              Skills\n            </TabsTrigger>\n          </TabsList>\n\n          <ScrollArea className=\"h-80\">\n            <TabsContent value=\"status\" className=\"m-0 p-4\">\n              <div className=\"space-y-3\">\n                {Object.entries(STATUS_CONFIG).map(([status, config]) => (\n                  <div key={status} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`status-${status}`}\n                      checked={filters.statuses.includes(status as IssueStatus)}\n                      onCheckedChange={(checked) => handleStatusToggle(status as IssueStatus, !!checked)}\n                      data-testid={`checkbox-status-${status}`}\n                    />\n                    <label htmlFor={`status-${status}`} className=\"text-sm text-jira-gray-700 cursor-pointer\">\n                      <div className=\"flex items-center space-x-2\">\n                        {config.icon}\n                        <span>{config.label}</span>\n                      </div>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"skills\" className=\"m-0 p-4\">\n              <div className=\"space-y-3\">\n                {uniqueLabels.map(label => (\n                  <div key={label} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`label-${label}`}\n                      checked={filters.labels.includes(label)}\n                      onCheckedChange={(checked) => handleLabelToggle(label, !!checked)}\n                      data-testid={`checkbox-label-${label}`}\n                    />\n                    <label htmlFor={`label-${label}`} className=\"text-sm text-jira-gray-700 cursor-pointer\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {label}\n                      </Badge>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n          </ScrollArea>\n        </Tabs>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6753},"client/src/components/IssueCard.tsx":{"content":"import { ArrowUp, ArrowDown, Minus, Bug, CheckSquare, BookOpen, Zap, GripVertical } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { JiraIssue, IssuePriority, IssueType } from '@shared/types';\n\ninterface IssueCardProps {\n  issue: JiraIssue;\n  onClick?: (issue: JiraIssue) => void;\n  isDragging?: boolean;\n}\n\nconst priorityIcons: Record<IssuePriority, { icon: React.ComponentType<any>; color: string; }> = {\n  highest: { icon: ArrowUp, color: 'text-red-500' },\n  high: { icon: ArrowUp, color: 'text-orange-500' }, \n  medium: { icon: Minus, color: 'text-green-500' },\n  low: { icon: ArrowDown, color: 'text-green-500' },\n  lowest: { icon: ArrowDown, color: 'text-gray-400' }\n};\n\nconst typeIcons: Record<IssueType, { icon: React.ComponentType<any>; color: string; }> = {\n  story: { icon: BookOpen, color: 'text-green-500' },\n  bug: { icon: Bug, color: 'text-red-500' },\n  task: { icon: CheckSquare, color: 'text-blue-500' },\n  epic: { icon: Zap, color: 'text-purple-500' }\n};\n\nexport default function IssueCard({ issue, onClick, isDragging = false }: IssueCardProps) {\n  const PriorityIcon = priorityIcons[issue.priority].icon;\n  const TypeIcon = typeIcons[issue.type].icon;\n\n  const handleClick = (e: React.MouseEvent) => {\n    // Prevent click event during drag\n    if (isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    console.log('Issue card clicked:', issue.key);\n    onClick?.(issue);\n  };\n\n  return (\n    <Card \n      onClick={handleClick}\n      className={`group p-3 sm:p-3.5 mb-2 sm:mb-3 bg-white border border-jira-gray-200 hover:bg-jira-gray-50 active:bg-jira-gray-100 transition-all duration-150 cursor-pointer touch-manipulation ${\n        isDragging ? 'opacity-50 cursor-grabbing' : 'shadow-sm hover:shadow-md'\n      }`}\n      data-testid={`card-issue-${issue.key}`}\n    >\n      <div>\n        {/* Issue Summary */}\n        <h3 className=\"text-sm sm:text-sm font-medium text-jira-gray-900 mb-2 sm:mb-2.5 leading-snug line-clamp-2\" data-testid={`text-issue-summary-${issue.id}`}>\n          {issue.summary}\n        </h3>\n\n        {/* Labels */}\n        {issue.labels.length > 0 && (\n          <div className=\"flex flex-wrap gap-1.5 mb-2.5 sm:mb-3\">\n            {issue.labels.slice(0, 2).map((label) => (\n              <Badge \n                key={label} \n                variant=\"secondary\" \n                className=\"text-xs px-2 py-0.5 bg-jira-gray-100 text-jira-gray-700 hover:bg-jira-gray-200 transition-colors\"\n                data-testid={`badge-label-${label}`}\n              >\n                {label}\n              </Badge>\n            ))}\n            {issue.labels.length > 2 && (\n              <Badge \n                variant=\"secondary\" \n                className=\"text-xs px-2 py-0.5 bg-jira-gray-100 text-jira-gray-700\"\n              >\n                +{issue.labels.length - 2}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {/* Bottom Row */}\n        <div className=\"flex items-center justify-between mt-2.5 sm:mt-3\">\n          {/* Left side - Issue key, type, priority */}\n          <div className=\"flex items-center space-x-1.5 sm:space-x-2\">\n            <span className=\"text-xs font-mono text-jira-gray-500 hover:text-jira-blue cursor-pointer transition-colors\" data-testid={`text-issue-key-${issue.id}`}>\n              {issue.key}\n            </span>\n            \n            <div className=\"flex items-center space-x-1\">\n              <TypeIcon className={`h-3.5 w-3.5 sm:h-4 sm:w-4 ${typeIcons[issue.type].color}`} />\n              <PriorityIcon className={`h-3.5 w-3.5 sm:h-4 sm:w-4 ${priorityIcons[issue.priority].color}`} />\n            </div>\n\n            {/* Story Points */}\n            {issue.storyPoints && (\n              <div className=\"w-5 h-5 sm:w-6 sm:h-6 rounded-full bg-jira-gray-100 flex items-center justify-center\">\n                <span className=\"text-xs font-semibold text-jira-gray-600\" data-testid={`text-story-points-${issue.id}`}>\n                  {issue.storyPoints}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {/* Right side - Assignee */}\n          <div className=\"flex items-center\">\n            {issue.assignee ? (\n              <Avatar className=\"h-6 w-6 sm:h-7 sm:w-7 ring-2 ring-white\" data-testid={`avatar-assignee-${issue.id}`}>\n                <AvatarImage src={issue.assignee.avatarUrl} alt={issue.assignee.name} />\n                <AvatarFallback className=\"bg-jira-blue text-white text-xs font-medium\">\n                  {issue.assignee.initials}\n                </AvatarFallback>\n              </Avatar>\n            ) : (\n              <div className=\"w-6 h-6 sm:w-7 sm:h-7 rounded-full bg-jira-gray-200 flex items-center justify-center ring-2 ring-white\" data-testid={`avatar-unassigned-${issue.id}`}>\n                <span className=\"text-xs text-jira-gray-500\">?</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":5108},"client/src/components/IssueModal.tsx":{"content":"import { useState } from 'react';\nimport { X, ArrowUp, ArrowDown, Minus, Bug, CheckSquare, BookOpen, Zap, Paperclip, MessageSquare, User, Calendar, Tag, MoreHorizontal, Plus } from 'lucide-react';\nimport { mockUsers } from '@/data/mockData';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { JiraIssue, IssuePriority, IssueType, IssueStatus } from '@shared/types';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface IssueModalProps {\n  issue: JiraIssue | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdate?: (updatedIssue: Partial<JiraIssue>) => void;\n}\n\nconst priorityIcons: Record<IssuePriority, { icon: React.ComponentType<any>; color: string; label: string; }> = {\n  highest: { icon: ArrowUp, color: 'text-red-500', label: 'Highest' },\n  high: { icon: ArrowUp, color: 'text-orange-500', label: 'High' }, \n  medium: { icon: Minus, color: 'text-green-500', label: 'Medium' },\n  low: { icon: ArrowDown, color: 'text-green-500', label: 'Low' },\n  lowest: { icon: ArrowDown, color: 'text-gray-400', label: 'Lowest' }\n};\n\nconst typeIcons: Record<IssueType, { icon: React.ComponentType<any>; color: string; label: string; }> = {\n  story: { icon: BookOpen, color: 'text-green-500', label: 'Story' },\n  bug: { icon: Bug, color: 'text-red-500', label: 'Bug' },\n  task: { icon: CheckSquare, color: 'text-blue-500', label: 'Task' },\n  epic: { icon: Zap, color: 'text-purple-500', label: 'Epic' }\n};\n\nconst statusOptions: Record<IssueStatus, string> = {\n  'to-do': 'To Do',\n  'in-progress': 'In Progress',\n  'done': 'Done'\n};\n\nexport default function IssueModal({ issue, isOpen, onClose, onUpdate }: IssueModalProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [newComment, setNewComment] = useState('');\n\n  if (!issue) return null;\n\n  const PriorityIcon = priorityIcons[issue.priority].icon;\n  const TypeIcon = typeIcons[issue.type].icon;\n\n  const handleEditToggle = () => {\n    setIsEditing(!isEditing);\n  };\n\n  const handleSave = () => {\n    console.log('Saving changes to issue:', issue.key);\n    onUpdate?.({});\n    setIsEditing(false);\n  };\n\n  const handleAddComment = () => {\n    if (newComment.trim()) {\n      console.log('Adding comment:', newComment);\n      \n      const newCommentObj = {\n        id: Date.now().toString(),\n        author: {\n          id: 'current-user',\n          name: 'You',\n          email: 'you@company.com',\n          initials: 'YU'\n        },\n        body: newComment.trim(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      onUpdate?.({ \n        comments: [...issue.comments, newCommentObj] \n      });\n      \n      setNewComment('');\n    }\n  };\n\n  const handleFieldChange = (field: string, value: any) => {\n    console.log(`Updating ${field}:`, value);\n    onUpdate?.({ [field]: value });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[95vh] sm:max-h-[90vh] overflow-hidden p-0 flex flex-col gap-0\" data-testid=\"modal-issue\">\n        {/* Header */}\n        <DialogHeader className=\"px-3 sm:px-6 py-3 sm:py-4 border-b border-jira-gray-200 flex flex-row items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0\">\n            <div className=\"flex items-center space-x-1 sm:space-x-2\">\n              <TypeIcon className={`h-4 w-4 ${typeIcons[issue.type].color}`} />\n              <span className=\"text-xs sm:text-sm text-jira-gray-500\">{typeIcons[issue.type].label}</span>\n            </div>\n            <span className=\"text-xs sm:text-sm font-mono text-jira-gray-500 truncate\" data-testid={`text-modal-issue-key-${issue.id}`}>\n              {issue.key}\n            </span>\n          </div>\n      \n        </DialogHeader>\n\n        <div className=\"flex flex-col md:flex-row flex-1 overflow-hidden\">\n          {/* Main Content */}\n          <div className=\"flex-1 p-3 sm:p-6 space-y-4 sm:space-y-6 overflow-y-auto\">\n            {/* Summary */}\n            <div>\n              <h1 className=\"text-lg sm:text-xl font-medium text-jira-gray-900 leading-tight\" \n                  data-testid={`text-modal-issue-summary-${issue.id}`}>\n                {issue.summary}\n              </h1>\n            </div>\n\n            {/* Description */}\n            <div>\n              <h3 className=\"text-sm font-medium text-jira-gray-900 mb-2\">Description</h3>\n              <div \n                className=\"text-sm text-jira-gray-700 p-3 bg-jira-gray-50 rounded min-h-20\"\n                data-testid={`text-modal-issue-description-${issue.id}`}\n              >\n                {issue.description || 'No description provided'}\n              </div>\n            </div>\n\n            {/* Edit Actions */}\n            {isEditing && (\n              <div className=\"flex space-x-2\">\n                <Button onClick={handleSave} size=\"sm\" data-testid=\"button-save-changes\">\n                  Save\n                </Button>\n                <Button variant=\"outline\" onClick={() => setIsEditing(false)} size=\"sm\" data-testid=\"button-cancel-changes\">\n                  Cancel\n                </Button>\n              </div>\n            )}\n\n            {/* Comments */}\n            <div>\n              <h3 className=\"text-sm font-medium text-jira-gray-900 mb-3 sm:mb-4 flex items-center\">\n                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                Comments ({issue.comments.length})\n              </h3>\n\n              {/* Add Comment */}\n              <div className=\"mb-4\">\n                <div className=\"flex space-x-2 sm:space-x-3\">\n                  <Avatar className=\"h-7 w-7 sm:h-8 sm:w-8 flex-shrink-0\">\n                    <AvatarFallback className=\"bg-jira-blue text-white text-xs font-medium\">\n                      You\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <Textarea\n                      value={newComment}\n                      onChange={(e) => setNewComment(e.target.value)}\n                      placeholder=\"Add a comment...\"\n                      rows={3}\n                      className=\"resize-none text-sm\"\n                      data-testid=\"textarea-add-comment\"\n                    />\n                    <div className=\"flex justify-end mt-2\">\n                      <Button \n                        onClick={handleAddComment}\n                        size=\"sm\"\n                        disabled={!newComment.trim()}\n                        data-testid=\"button-add-comment\"\n                        className=\"transition-opacity\"\n                      >\n                        Comment\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Existing Comments */}\n              <div className=\"space-y-3 sm:space-y-4\">\n                {issue.comments.map((comment) => (\n                  <div key={comment.id} className=\"flex space-x-2 sm:space-x-3\" data-testid={`comment-${comment.id}`}>\n                    <Avatar className=\"h-7 w-7 sm:h-8 sm:w-8 flex-shrink-0\">\n                      <AvatarImage src={comment.author.avatarUrl} alt={comment.author.name} />\n                      <AvatarFallback className=\"bg-jira-blue text-white text-xs font-medium\">\n                        {comment.author.initials}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"bg-jira-gray-50 p-2.5 sm:p-3 rounded border\">\n                        <div className=\"flex items-center justify-between mb-1 gap-2\">\n                          <span className=\"text-xs sm:text-sm font-medium text-jira-gray-900 truncate\" data-testid={`text-comment-author-${comment.id}`}>\n                            {comment.author.name}\n                          </span>\n                          <span className=\"text-xs text-jira-gray-500 flex-shrink-0\" data-testid={`text-comment-date-${comment.id}`}>\n                            {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n                          </span>\n                        </div>\n                        <p className=\"text-xs sm:text-sm text-jira-gray-700\" data-testid={`text-comment-body-${comment.id}`}>\n                          {comment.body}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"w-full md:w-64 bg-jira-gray-50 border-t md:border-t-0 md:border-l border-jira-gray-200 p-3 sm:p-4 space-y-3 sm:space-y-4 flex-shrink-0 md:overflow-y-auto\">\n            <div>\n              <label className=\"text-xs font-medium text-jira-gray-500 uppercase tracking-wide mb-2 block\">\n                Status\n              </label>\n              <Select \n                value={issue.status} \n                onValueChange={(value) => handleFieldChange('status', value)}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"select-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(statusOptions).map(([key, label]) => (\n                    <SelectItem key={key} value={key}>\n                      {label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <label className=\"text-xs font-medium text-jira-gray-500 uppercase tracking-wide\">\n                  Assignee\n                </label>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0 text-jira-gray-500 hover:text-jira-blue\"\n                  onClick={() => window.open('/project-settings', '_blank')}\n                  title=\"Manage team members\"\n                >\n                  <Plus className=\"h-3 w-3\" />\n                </Button>\n              </div>\n              <Select \n                value={issue.assignee?.id || 'unassigned'} \n                onValueChange={(value) => {\n                  if (value === 'unassigned') {\n                    handleFieldChange('assignee', undefined);\n                  } else {\n                    const user = mockUsers.find(u => u.id === value);\n                    handleFieldChange('assignee', user);\n                  }\n                }}\n              >\n                <SelectTrigger className=\"w-full\" data-testid=\"select-assignee\">\n                  <SelectValue>\n                    <div className=\"flex items-center space-x-2\">\n                      {issue.assignee ? (\n                        <>\n                          <Avatar className=\"h-5 w-5\">\n                            <AvatarImage src={issue.assignee.avatarUrl} alt={issue.assignee.name} />\n                            <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                              {issue.assignee.initials}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm\">{issue.assignee.name}</span>\n                        </>\n                      ) : (\n                        <>\n                          <User className=\"h-4 w-4 text-jira-gray-500\" />\n                          <span className=\"text-sm text-jira-gray-500\">Unassigned</span>\n                        </>\n                      )}\n                    </div>\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"unassigned\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"h-4 w-4 text-jira-gray-500\" />\n                      <span>Unassigned</span>\n                    </div>\n                  </SelectItem>\n                  {mockUsers.map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      <div className=\"flex items-center space-x-2\">\n                        <Avatar className=\"h-5 w-5\">\n                          <AvatarImage src={user.avatarUrl} alt={user.name} />\n                          <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                            {user.initials}\n                          </AvatarFallback>\n                        </Avatar>\n                        <span>{user.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"text-xs font-medium text-jira-gray-500 uppercase tracking-wide mb-2 block\">\n                Priority\n              </label>\n              <div className=\"flex items-center space-x-2 p-2 rounded border border-jira-gray-200 bg-white\" data-testid=\"field-priority\">\n                <PriorityIcon className={`h-4 w-4 ${priorityIcons[issue.priority].color}`} />\n                <span className=\"text-sm text-jira-gray-900\">{priorityIcons[issue.priority].label}</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-xs font-medium text-jira-gray-500 uppercase tracking-wide mb-2 block\">\n                Story Points\n              </label>\n              <div className=\"p-2 rounded border border-jira-gray-200 bg-white\" data-testid=\"field-story-points\">\n                <span className=\"text-sm text-jira-gray-900\">\n                  {issue.storyPoints || 'None'}\n                </span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-xs font-medium text-jira-gray-500 uppercase tracking-wide mb-2 block\">\n                Labels\n              </label>\n              <div className=\"flex flex-wrap gap-1\">\n                {issue.labels.map((label) => (\n                  <Badge \n                    key={label} \n                    variant=\"secondary\" \n                    className=\"text-xs px-2 py-0.5 bg-jira-gray-200 text-jira-gray-700\"\n                    data-testid={`badge-modal-label-${label}`}\n                  >\n                    {label}\n                  </Badge>\n                ))}\n              \n              </div>\n            </div>\n\n            <div className=\"pt-4 border-t border-jira-gray-200\">\n              <div className=\"text-xs text-jira-gray-500 space-y-1\">\n                <div data-testid=\"text-modal-created\">\n                  Created {formatDistanceToNow(new Date(issue.createdAt), { addSuffix: true })}\n                </div>\n                <div data-testid=\"text-modal-updated\">\n                  Updated {formatDistanceToNow(new Date(issue.updatedAt), { addSuffix: true })}\n                </div>\n                <div data-testid=\"text-modal-reporter\">\n                  Reporter: {issue.reporter.name}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15626},"client/src/components/JiraHeader.tsx":{"content":"import { useState } from 'react';\nimport { Search, Bell, HelpCircle, Settings, Plus, MessageSquare, GitPullRequest, CheckCircle, AlertCircle, Menu } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { Badge } from '@/components/ui/badge';\nimport { mockUsers } from '@/data/mockData';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface JiraHeaderProps {\n  onMobileMenuToggle?: () => void;\n}\n\nconst mockNotifications = [\n  {\n    id: '1',\n    type: 'comment',\n    title: 'New comment on PROJ-1',\n    message: 'Mike Chen commented: \"Started working on the Google OAuth integration\"',\n    time: '2 hours ago',\n    read: false,\n    icon: MessageSquare,\n  },\n  {\n    id: '2',\n    type: 'pr',\n    title: 'Pull request approved',\n    message: 'Your pull request #42 has been approved by Sarah Johnson',\n    time: '5 hours ago',\n    read: false,\n    icon: GitPullRequest,\n  },\n\n  {\n    id: '4',\n    type: 'complete',\n    title: 'Issue completed',\n    message: 'PROJ-2 was moved to Done by Jessica Williams',\n    time: '2 days ago',\n    read: true,\n    icon: CheckCircle,\n  },\n];\n\nexport default function JiraHeader({ onMobileMenuToggle }: JiraHeaderProps) {\n  const currentUser = mockUsers[0]; // todo: remove mock functionality\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchOpen, setSearchOpen] = useState(false);\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    setSearchOpen(query.length > 0);\n  };\n\n\n  const unreadCount = mockNotifications.filter(n => !n.read).length;\n\n  const allSearchItems = [\n    // Sidebar Pages\n    { type: 'page', title: 'Roadmap', path: '/roadmap', category: 'Pages' },\n    { type: 'page', title: 'Backlog', path: '/backlog', category: 'Pages' },\n    { type: 'page', title: 'Active Sprints', path: '/board', category: 'Pages' },\n    { type: 'page', title: 'Code', path: '/code', category: 'Pages' },\n    { type: 'page', title: 'Releases', path: '/releases', category: 'Pages' },\n    { type: 'page', title: 'Projects', path: '/projects', category: 'Pages' },\n    { type: 'page', title: 'Project Settings', path: '/settings', category: 'Pages' },\n    \n    // Topbar Pages\n    { type: 'page', title: 'Your Work', path: '/your-work', category: 'Pages' },\n    { type: 'page', title: 'Dashboard', path: '/dashboard', category: 'Pages' },\n    { type: 'page', title: 'Teams', path: '/teams', category: 'Pages' },\n    { type: 'page', title: 'Filters', path: '/filters', category: 'Pages' },\n    { type: 'page', title: 'Notifications', path: '/notifications', category: 'Pages' },\n    { type: 'page', title: 'Help', path: '/help', category: 'Pages' },\n    \n    // Issues\n    { type: 'issue', key: 'PROJ-1', title: 'Set up user authentication system', category: 'Issues', path: '/board' },\n    { type: 'issue', key: 'PROJ-2', title: 'Design dashboard wireframes', category: 'Issues', path: '/board' },\n  ];\n\n  const searchResults = searchQuery.length > 0 ? allSearchItems.filter(item => \n    item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    ('key' in item && item.key && item.key.toLowerCase().includes(searchQuery.toLowerCase()))\n  ) : [];\n\n  return (\n    <header className=\"h-14 bg-white border-b border-jira-gray-200 flex items-center justify-between px-3 sm:px-4 md:px-6 relative z-50\">\n      {/* Left section */}\n      <div className=\"flex items-center space-x-2 sm:space-x-3 md:space-x-4 flex-1 min-w-0\">\n        {/* Mobile menu button */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"lg:hidden h-8 w-8 p-0 flex-shrink-0\"\n          onClick={onMobileMenuToggle}\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n\n        {/* Jira Logo */}\n        <Link href=\"/\">\n          <div className=\"flex items-center space-x-2 cursor-pointer hover:opacity-80 transition-opacity flex-shrink-0\">\n            <img \n              src=\"/assets/jira-logo.jpg\" \n              alt=\"Jira\" \n              className=\"w-6 h-6 sm:w-7 sm:h-7 rounded object-cover\"\n            />\n            <span className=\"hidden sm:inline font-semibold text-jira-gray-800 text-sm md:text-base\">Jira</span>\n          </div>\n        </Link>\n\n        {/* Global Search Bar */}\n        <div className=\"flex-1 max-w-md mx-2 sm:mx-4 md:mx-8\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-jira-gray-400 h-4 w-4 pointer-events-none\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search...\"\n              className=\"hidden md:block pl-10 pr-4 py-2 w-full h-9 bg-jira-gray-50 border-jira-gray-200 focus:border-jira-blue focus:ring-jira-blue focus:bg-white text-sm transition-colors\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              onFocus={() => searchQuery && setSearchOpen(true)}\n              data-testid=\"input-global-search\"\n            />\n            {/* Mobile search icon */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden h-8 w-8 p-0 flex-shrink-0\"\n              onClick={() => setSearchOpen(!searchOpen)}\n              data-testid=\"button-mobile-search\"\n            >\n              <Search className=\"h-5 w-5\" />\n            </Button>\n            {searchOpen && searchResults.length > 0 && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-jira-gray-200 rounded-md shadow-lg max-h-80 sm:max-h-96 overflow-y-auto z-50 w-screen sm:w-auto sm:min-w-[300px] -ml-3 sm:ml-0\">\n                {searchResults.map((result, idx) => (\n                  <div key={idx}>\n                    {idx === 0 && (\n                      <div className=\"px-3 py-2 text-xs font-semibold text-jira-gray-500 uppercase sticky top-0 bg-white\">\n                        {result.category}\n                      </div>\n                    )}\n                    {idx > 0 && searchResults[idx - 1].category !== result.category && (\n                      <div className=\"px-3 py-2 text-xs font-semibold text-jira-gray-500 uppercase border-t border-jira-gray-200 sticky top-0 bg-white\">\n                        {result.category}\n                      </div>\n                    )}\n                    <Link \n                      href={result.type === 'page' ? result.path : '/board'}\n                      onClick={() => setSearchOpen(false)}\n                    >\n                      <div className=\"px-3 py-2 hover:bg-jira-gray-50 cursor-pointer active:bg-jira-gray-100 transition-colors\">\n                        <div className=\"text-sm text-jira-gray-900 font-medium\">{result.title}</div>\n                        {'key' in result && result.key && (\n                          <div className=\"text-xs text-jira-gray-500 mt-0.5\">{result.key}</div>\n                        )}\n                      </div>\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"hidden lg:flex items-center space-x-2 xl:space-x-4 flex-shrink-0\">\n          \n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-jira-gray-700 hover:text-jira-blue hover:bg-jira-blue-light transition-colors\">\n              <span className=\"gradient-text text-sm\">Projects</span>\n\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\" className=\"w-64\">\n              <DropdownMenuLabel>Recent projects</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <a \n  href=\"https://aryavhir.in\" \n  target=\"_blank\" \n  rel=\"noopener noreferrer\" \n  className=\"w-full\"\n>\n  Portfolio-Website\n</a>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                 <a \n  href=\"https://modelia-project.vercel.app/\" \n  target=\"_blank\" \n  rel=\"noopener noreferrer\" \n  className=\"w-full\"\n>AI-studio</a>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem className=\"text-jira-blue\" asChild>\n                <Link href=\"/projects\" className=\"w-full\">View all projects</Link>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          \n        \n          \n          <Button asChild variant=\"ghost\" size=\"sm\" className=\"text-jira-gray-700 hover:text-jira-blue hover:bg-jira-blue-light transition-colors\">\n            <Link href=\"/dashboard\">Dashboards</Link>\n          </Button>\n          \n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-jira-gray-700 hover:text-jira-blue hover:bg-jira-blue-light transition-colors\">\n                  \n                Teams\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"start\" className=\"w-64\">\n              <DropdownMenuLabel>Your teams</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link href=\"/teams\" className=\"w-full\">Development Team</Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/teams\" className=\"w-full\">Design Team</Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/teams\" className=\"w-full\">Product Team</Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem className=\"text-jira-blue\" asChild>\n                <Link href=\"/teams\" className=\"w-full\">Create team</Link>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          \n        </nav>\n      </div>\n\n      {/* Right section */}\n      <div className=\"flex items-center space-x-1 sm:space-x-2 flex-shrink-0\">\n      \n\n    \n\n        {/* Help */}\n        <Button \n          asChild\n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"hidden sm:flex h-8 w-8 text-jira-gray-500 hover:text-jira-gray-700 hover:bg-jira-gray-100 transition-colors\"\n          data-testid=\"button-help\"\n        >\n          <Link href=\"/help\">\n            <HelpCircle className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n\n        {/* Settings */}\n        <Button \n          asChild\n          variant=\"ghost\" \n          size=\"icon\" \n          className=\"hidden sm:flex h-8 w-8 text-jira-gray-500 hover:text-jira-gray-700 hover:bg-jira-gray-100 transition-colors\"\n          data-testid=\"button-settings\"\n        >\n          <Link href=\"/settings\">\n            <Settings className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n\n        {/* Notifications */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-8 w-8 text-jira-gray-500 hover:text-jira-gray-700 hover:bg-jira-gray-100 relative transition-colors\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-4 w-4\" />\n              {unreadCount > 0 && (\n                <span className=\"absolute -top-0.5 -right-0.5 h-4 w-4 bg-red-500 rounded-full text-white text-[10px] flex items-center justify-center font-medium\">\n                  {unreadCount}\n                </span>\n              )}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-80 sm:w-96\">\n            <DropdownMenuLabel className=\"flex items-center justify-between\">\n              <span>Notifications</span>\n              {unreadCount > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-2\">{unreadCount} new</Badge>\n              )}\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <div className=\"max-h-[60vh] sm:max-h-96 overflow-y-auto\">\n              {mockNotifications.map(notification => {\n                const IconComponent = notification.icon;\n                return (\n                  <DropdownMenuItem \n                    key={notification.id} \n                    className={`p-3 cursor-pointer transition-colors ${!notification.read ? 'bg-blue-50' : ''}`}\n                    onClick={() => window.location.href = '/notifications'}\n                  >\n                    <div className=\"flex gap-3 w-full\">\n                      <IconComponent className=\"h-5 w-5 text-jira-gray-500 flex-shrink-0 mt-0.5\" />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-jira-gray-900\">{notification.title}</p>\n                        <p className=\"text-sm text-jira-gray-600 mt-1 line-clamp-2\">{notification.message}</p>\n                        <p className=\"text-xs text-jira-gray-500 mt-1\">{notification.time}</p>\n                      </div>\n                      {!notification.read && (\n                        <div className=\"h-2 w-2 bg-blue-500 rounded-full flex-shrink-0 mt-2\"></div>\n                      )}\n                    </div>\n                  </DropdownMenuItem>\n                );\n              })}\n            </div>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"justify-center text-jira-blue font-medium\" asChild>\n              <Link href=\"/notifications\" className=\"w-full text-center\">\n                View all notifications\n              </Link>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* User Avatar */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 transition-opacity hover:opacity-80\" data-testid=\"button-user-menu\">\n              <Avatar className=\"h-6 w-6 sm:h-7 sm:w-7\">\n                <AvatarImage src={currentUser.avatarUrl} alt={currentUser.name} />\n                <AvatarFallback className=\"bg-jira-blue text-white text-xs font-medium\">\n                  {currentUser.initials}\n                </AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <div className=\"px-2 py-2\">\n              <p className=\"text-sm font-medium text-jira-gray-900\" data-testid=\"text-user-name\">\n                {currentUser.name}\n              </p>\n              <p className=\"text-xs text-jira-gray-500\" data-testid=\"text-user-email\">\n                {currentUser.email}\n              </p>\n            </div>\n            <DropdownMenuSeparator />\n            \n            <DropdownMenuItem asChild>\n              <Link href=\"/settings\" className=\"w-full\">Settings</Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}","size_bytes":15389},"client/src/components/JiraSidebar.tsx":{"content":"import { useState } from 'react';\nimport { useLocation, Link } from 'wouter';\nimport { ChevronDown, ChevronRight, Settings, FolderOpen, Users, Zap, Search, Star, Clock, UserCheck, Github, BarChart3 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { mockProjects } from '@/data/mockData';\n\ninterface SidebarItemProps {\n  icon: React.ReactNode;\n  label: string | React.ReactNode;\n  isActive?: boolean;\n  onClick?: () => void;\n  href?: string;\n  hasSubmenu?: boolean;\n  isExpanded?: boolean;\n  onToggle?: () => void;\n  children?: React.ReactNode;\n  testId?: string;\n}\n\nfunction SidebarItem({ \n  icon, \n  label, \n  isActive = false, \n  onClick, \n  href,\n  hasSubmenu = false, \n  isExpanded = false, \n  onToggle, \n  children,\n  testId \n}: SidebarItemProps) {\n  const content = (\n    <Button\n      variant=\"ghost\"\n      onClick={hasSubmenu ? onToggle : onClick}\n      className={`w-full justify-start px-3 py-2 h-9 sm:h-10 text-sm font-normal text-jira-gray-700 hover:bg-jira-gray-100 transition-all duration-150 ${\n        isActive ? 'bg-jira-blue-light text-jira-blue border-r-2 border-jira-blue font-medium' : ''\n      }`}\n      data-testid={testId}\n      asChild={!!href && !hasSubmenu}\n    >\n      {href && !hasSubmenu ? (\n        <Link href={href}>\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"flex items-center space-x-3\">\n              {icon}\n              <span className=\"text-left\">{label}</span>\n            </div>\n          </div>\n        </Link>\n      ) : (\n        <div className=\"flex items-center justify-between w-full\">\n          <div className=\"flex items-center space-x-3\">\n            {icon}\n            <span className=\"text-left\">{label}</span>\n          </div>\n          {hasSubmenu && (\n            <div className=\"ml-auto\">\n              {isExpanded ? (\n                <ChevronDown className=\"h-3 w-3 text-jira-gray-500\" />\n              ) : (\n                <ChevronRight className=\"h-3 w-3 text-jira-gray-500\" />\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </Button>\n  );\n  \n  return (\n    <div className=\"w-full\">\n      {content}\n      {hasSubmenu && isExpanded && (\n        <div className=\"ml-6 mt-1 space-y-1\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n\ninterface JiraSidebarProps {\n  isMobileMenuOpen?: boolean;\n  onMobileMenuClose?: () => void;\n}\n\nexport default function JiraSidebar({ isMobileMenuOpen = false, onMobileMenuClose }: JiraSidebarProps) {\n  const [location] = useLocation();\n  const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>({\n    projects: true,\n    filters: false\n  });\n\n  const currentProject = mockProjects[0]; // todo: remove mock functionality\n\n  const toggleExpanded = (key: string) => {\n    setExpandedItems(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n\n  const isActive = (path: string) => {\n    if (path === '/' || path === '/board') {\n      return location === '/' || location === '/board';\n    }\n    return location === path;\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden animate-in fade-in duration-200\"\n          onClick={onMobileMenuClose}\n        />\n      )}\n      \n      <aside className={`fixed lg:relative w-64 sm:w-72 lg:w-64 bg-white border-r border-jira-gray-200 h-screen overflow-y-auto transition-transform duration-300 ease-in-out z-50 ${isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0`}>\n      {/* Project Header */}\n      <div className=\"p-3 sm:p-4 border-b border-jira-gray-200 bg-jira-gray-50\">\n        <div className=\"flex items-center space-x-3\">\n          <Avatar className=\"h-9 w-9 sm:h-10 sm:w-10\">\n            <AvatarImage src={currentProject.avatarUrl || '/assets/jira-logo.jpg'} alt={currentProject.name} />\n            <AvatarFallback className=\"bg-jira-blue text-white text-sm font-medium\">\n              {currentProject.key.substring(0, 2)}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-sm font-semibold text-jira-gray-900 truncate\" data-testid=\"text-project-name\">\n              {currentProject.name}\n            </h2>\n            <p className=\"text-xs text-jira-gray-500\" data-testid=\"text-project-type\">\n              Software project\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"p-2 sm:p-3 space-y-1\">\n        {/* Planning */}\n        <div className=\"mb-4\">\n          <div className=\"px-2 py-2 mb-1\">\n            <span className=\"text-xs font-semibold text-jira-gray-500 uppercase tracking-wider\">\n              Planning\n            </span>\n          </div>\n          <SidebarItem\n            icon={<BarChart3 className=\"h-4 w-4\" />}\n            label=\"Roadmap\"\n            href=\"/roadmap\"\n            isActive={isActive('/roadmap')}\n            testId=\"nav-roadmap\"\n          />\n          <SidebarItem\n            icon={<FolderOpen className=\"h-4 w-4\" />}\n            label=\"Backlog\"\n            href=\"/backlog\"\n            isActive={isActive('/backlog')}\n            testId=\"nav-backlog\"\n          />\n          <SidebarItem\n            icon={<Zap className=\"h-4 w-4\" />}\n            label=\"Active sprints\"\n            href=\"/board\"\n            isActive={isActive('/board')}\n            testId=\"nav-active-sprints\"\n          />\n        </div>\n\n        {/* Development */}\n        <div className=\"mb-4\">\n          <div className=\"px-2 py-2 mb-1\">\n            <span className=\"text-xs font-semibold text-jira-gray-500 uppercase tracking-wider\">\n              Development\n            </span>\n          </div>\n          <div className=\"relative\">\n            <SidebarItem\n              icon={<Github className=\"h-4 w-4\" />}\n              label=\"\"\n              href=\"/code\"\n              isActive={isActive('/code')}\n              testId=\"nav-code\"\n            />\n            <div className=\"absolute inset-0 pointer-events-none flex items-center pl-11\">\n              <span className=\"gradient-text text-sm\">Code</span>\n            </div>\n          </div>\n           <div className=\"relative\">\n          <SidebarItem\n            icon={<FolderOpen className=\"h-4 w-4\" />}\n            label=\"\"\n            href=\"/projects\"\n            isActive={isActive('/projects')}\n            testId=\"nav-all-projects\"\n            \n          />\n           <div className=\"absolute inset-0 pointer-events-none flex items-center pl-11\">\n              <span className=\"gradient-text text-sm\">Projects</span>\n            </div>\n</div>\n          <SidebarItem\n            icon={<UserCheck className=\"h-4 w-4\" />}\n            label=\"Releases\"\n            href=\"/releases\"\n            isActive={isActive('/releases')}\n            testId=\"nav-releases\"\n          />\n        </div>\n\n\n\n        {/* Project Settings */}\n        <div className=\"pt-4 mt-4 border-t border-jira-gray-200\">\n          <SidebarItem\n            icon={<Settings className=\"h-4 w-4\" />}\n            label=\"Project settings\"\n            href=\"/settings\"\n            isActive={isActive('/settings')}\n            testId=\"nav-project-settings\"\n          />\n        </div>\n      </nav>\n      </aside>\n    </>\n  );\n}","size_bytes":7392},"client/src/components/KanbanBoard.tsx":{"content":"import { useState } from 'react';\nimport { DndContext, DragOverlay, closestCenter, DragStartEvent, DragEndEvent, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\nimport IssueCard from './IssueCard';\nimport { JiraIssue, KanbanColumn, IssueStatus } from '@shared/types';\n\ninterface SortableIssueCardProps {\n  issue: JiraIssue;\n  onClick?: (issue: JiraIssue) => void;\n}\n\nfunction SortableIssueCard({ issue, onClick }: SortableIssueCardProps) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: issue.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n    >\n      <IssueCard \n        issue={issue} \n        onClick={onClick} \n        isDragging={isDragging}\n      />\n    </div>\n  );\n}\n\ninterface KanbanColumnComponentProps {\n  column: KanbanColumn;\n  onAddIssue: (columnId: string) => void;\n  onIssueClick: (issue: JiraIssue) => void;\n}\n\nfunction KanbanColumnComponent({ column, onAddIssue, onIssueClick }: KanbanColumnComponentProps) {\n  const issueCount = column.issues.length;\n  const isOverLimit = column.limit && issueCount > column.limit;\n  \n  const { setNodeRef } = useSortable({\n    id: column.id,\n    data: {\n      type: 'column',\n      column\n    }\n  });\n\n  return (\n    <Card \n      ref={setNodeRef}\n      className=\"bg-jira-gray-50 border-jira-gray-200 h-full flex flex-col\" \n      data-testid={`column-${column.status}`}\n    >\n      {/* Column Header */}\n      <div className=\"p-3 border-b border-jira-gray-200 bg-white flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <h3 className=\"text-xs font-semibold text-jira-gray-600 uppercase tracking-wide\" data-testid={`text-column-title-${column.id}`}>\n              {column.title}\n            </h3>\n            <span className={`text-xs px-1.5 py-0.5 rounded ${\n              isOverLimit ? 'bg-red-100 text-red-700' : 'bg-jira-gray-100 text-jira-gray-600'\n            }`} data-testid={`text-column-count-${column.id}`}>\n              {issueCount}\n              {column.limit && ` / ${column.limit}`}\n            </span>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"h-6 w-6 text-jira-gray-500 hover:text-jira-gray-700 hover:bg-jira-gray-200\"\n            onClick={() => onAddIssue(column.id)}\n            data-testid={`button-add-issue-${column.id}`}\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Column Content */}\n      <div className=\"flex-1 p-3\">\n        <SortableContext items={column.issues.map(issue => issue.id)} strategy={verticalListSortingStrategy}>\n          <div className=\"space-y-2\">\n            {column.issues.map((issue) => (\n              <SortableIssueCard\n                key={issue.id}\n                issue={issue}\n                onClick={onIssueClick}\n              />\n            ))}\n          </div>\n        </SortableContext>\n\n        {/* Empty state */}\n        {column.issues.length === 0 && (\n          <div className=\"text-center py-8\" data-testid={`empty-state-${column.id}`}>\n            <p className=\"text-sm text-jira-gray-500\">No issues</p>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"mt-2 text-jira-gray-600 hover:text-jira-blue\"\n              onClick={() => onAddIssue(column.id)}\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Create issue\n            </Button>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n\ninterface KanbanBoardProps {\n  columns: KanbanColumn[];\n  onIssueMove?: (issueId: string, fromStatus: IssueStatus, toStatus: IssueStatus) => void;\n  onIssueClick?: (issue: JiraIssue) => void;\n  onAddIssue?: (columnId: string) => void;\n}\n\nexport default function KanbanBoard({ columns: initialColumns, onIssueMove, onIssueClick, onAddIssue }: KanbanBoardProps) {\n  const [activeIssue, setActiveIssue] = useState<JiraIssue | null>(null);\n\n  // Configure pointer sensor with distance threshold\n  // This allows clicks to work while requiring a small drag distance to start dragging\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8, // Require 8px movement before drag starts\n      },\n    })\n  );\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event;\n    const issue = findIssueById(active.id as string);\n    setActiveIssue(issue);\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    setActiveIssue(null);\n\n    if (!over) return;\n\n    const activeIssueId = active.id as string;\n    const overId = over.id as string;\n\n    // Find which column the issue is being dropped into\n    // Check if dropped on a column directly or on an issue within a column\n    let overColumn = findColumnById(overId);\n    if (!overColumn) {\n      overColumn = findColumnByIssueId(overId);\n    }\n    \n    if (!overColumn) return;\n\n    const activeIssue = findIssueById(activeIssueId);\n    if (!activeIssue) return;\n\n    const activeColumn = findColumnByIssueId(activeIssueId);\n    if (!activeColumn) return;\n\n    // Only handle drag and drop - don't maintain local state\n    // The parent component will handle the state update\n    if (activeColumn.id !== overColumn.id) {\n      console.log(`Issue moved: ${activeIssueId} from ${activeColumn.status} to ${overColumn.status}`);\n      onIssueMove?.(activeIssueId, activeColumn.status, overColumn.status);\n    }\n  };\n\n  const findIssueById = (id: string): JiraIssue | null => {\n    for (const column of initialColumns) {\n      const issue = column.issues.find(issue => issue.id === id);\n      if (issue) return issue;\n    }\n    return null;\n  };\n\n  const findColumnByIssueId = (issueId: string): KanbanColumn | null => {\n    return initialColumns.find(column => \n      column.issues.some(issue => issue.id === issueId)\n    ) || null;\n  };\n\n  const findColumnById = (id: string): KanbanColumn | null => {\n    return initialColumns.find(column => column.id === id) || null;\n  };\n\n  const handleIssueClick = (issue: JiraIssue) => {\n    console.log('Opening issue:', issue.key);\n    onIssueClick?.(issue);\n  };\n\n  const handleAddIssue = (columnId: string) => {\n    console.log('Adding issue to column:', columnId);\n    onAddIssue?.(columnId);\n  };\n\n  // Get all sortable IDs (issues + columns)\n  const sortableIds = [\n    ...initialColumns.map(col => col.id),\n    ...initialColumns.flatMap(col => col.issues.map(issue => issue.id))\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-x-auto overflow-y-auto pb-4\" data-testid=\"kanban-board\">\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={sortableIds} strategy={verticalListSortingStrategy}>\n          <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 lg:space-x-6 min-h-full md:min-w-max px-2 md:px-0\">\n            {initialColumns.map((column) => (\n              <div key={column.id} className=\"flex-shrink-0 w-full md:w-72 lg:w-80 max-w-full\">\n                <KanbanColumnComponent\n                  column={column}\n                  onAddIssue={handleAddIssue}\n                  onIssueClick={handleIssueClick}\n                />\n              </div>\n            ))}\n          </div>\n        </SortableContext>\n\n        <DragOverlay>\n          {activeIssue && (\n            <IssueCard issue={activeIssue} isDragging />\n          )}\n        </DragOverlay>\n      </DndContext>\n    </div>\n  );\n}","size_bytes":8169},"client/src/components/StartupOverlay.tsx":{"content":"import { useState, useEffect } from 'react';\nimport Stepper, { Step } from './stepper/stepper';\nimport { CheckCircle, Users, BarChart3, GitBranch, Settings, Zap } from 'lucide-react';\n\ninterface StartupOverlayProps {\n  onComplete?: () => void;\n}\n\nexport default function StartupOverlay({ onComplete }: StartupOverlayProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n\n  useEffect(() => {\n    // Check if user has seen the startup overlay before\n    const hasSeenStartup = localStorage.getItem('jira-startup-seen');\n    if (!hasSeenStartup) {\n      setIsVisible(true);\n    }\n  }, []);\n\n  const handleComplete = () => {\n    localStorage.setItem('jira-startup-seen', 'true');\n    setIsVisible(false);\n    onComplete?.();\n  };\n\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm flex items-center justify-center p-2 sm:p-4\">\n      <div className=\"relative w-full max-w-2xl\">\n        <Stepper\n          initialStep={1}\n          onStepChange={setCurrentStep}\n          onFinalStepCompleted={handleComplete}\n          backButtonText=\"Previous\"\n          nextButtonText=\"Next\"\n          stepCircleContainerClassName=\"bg-white rounded-xl\"\n          contentClassName=\"text-center\"\n        >\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <img \n                  src=\"/assets/jira-logo.jpg\" \n                  alt=\"Jira\" \n                  className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-lg object-cover\"\n                />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                Welcome to My Jira Clone!\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg px-2\">\n                A powerful project management tool built with React and TypeScript. \n                Let's take a quick tour of the key features.\n              </p>\n            </div>\n          </Step>\n\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <BarChart3 className=\"h-12 w-12 sm:h-16 sm:w-16 text-blue-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                Kanban Board\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg mb-3 sm:mb-4 px-2\">\n                Organize your tasks with our intuitive drag-and-drop kanban board. \n                Move issues between columns as they progress through your workflow.\n              </p>\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4 text-xs sm:text-sm text-gray-700 mx-2\">\n                💡 <strong>Pro tip:</strong> Click and hold any issue card to drag it between columns!\n              </div>\n            </div>\n          </Step>\n\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <Users className=\"h-12 w-12 sm:h-16 sm:w-16 text-green-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                Team Collaboration\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg mb-3 sm:mb-4 px-2\">\n                Assign issues to team members, add comments, and track progress together. \n                Everyone stays in sync with real-time updates.\n              </p>\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4 text-xs sm:text-sm text-gray-700 mx-2\">\n                💡 <strong>Pro tip:</strong> Use the + button next to assignees to manage your team!\n              </div>\n            </div>\n          </Step>\n\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <GitBranch className=\"h-12 w-12 sm:h-16 sm:w-16 text-purple-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                Code Integration\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg mb-3 sm:mb-4 px-2\">\n                Connect your GitHub repositories and track pull requests directly from Jira. \n                Keep your code and project management in sync.\n              </p>\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4 text-xs sm:text-sm text-gray-700 mx-2\">\n                💡 <strong>Pro tip:</strong> Check out the Project tab to see more  projects !\n              </div>\n            </div>\n          </Step>\n\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <Settings className=\"h-12 w-12 sm:h-16 sm:w-16 text-orange-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                Customizable Workflow\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg mb-3 sm:mb-4 px-2\">\n                Customize your project workflow, add custom columns, create labels, \n                and manage team members to fit your team's needs.\n              </p>\n              <div className=\"bg-gray-50 rounded-lg p-3 sm:p-4 text-xs sm:text-sm text-gray-700 mx-2\">\n                💡 <strong>Pro tip:</strong> Visit Project Settings to customize your workflow!\n              </div>\n            </div>\n          </Step>\n\n          <Step>\n            <div className=\"py-4 sm:py-8\">\n              <div className=\"flex justify-center mb-4 sm:mb-6\">\n                <Zap className=\"h-12 w-12 sm:h-16 sm:w-16 text-yellow-600\" />\n              </div>\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-3 sm:mb-4\">\n                You're All Set!\n              </h2>\n              <p className=\"text-gray-600 text-sm sm:text-lg mb-4 sm:mb-6 px-2\">\n                You're ready to start managing your projects with Jira Clone. \n                Create your first issue and begin organizing your work!\n              </p>\n              <div className=\"bg-blue-50 rounded-lg p-3 sm:p-4 text-xs sm:text-sm text-blue-800 mx-2\">\n                <CheckCircle className=\"h-4 w-4 sm:h-5 sm:w-5 inline mr-2\" />\n                <strong>Ready to go!</strong> Click Complete to start using Jira Clone.\n              </div>\n            </div>\n          </Step>\n        </Stepper>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6624},"client/src/contexts/WorkflowContext.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { KanbanColumn } from '@shared/types';\nimport { mockKanbanColumns } from '@/data/mockData';\n\ninterface WorkflowContextType {\n  columns: KanbanColumn[];\n  setColumns: React.Dispatch<React.SetStateAction<KanbanColumn[]>>;\n  addColumn: (column: KanbanColumn) => void;\n}\n\nconst WorkflowContext = createContext<WorkflowContextType | undefined>(undefined);\n\nexport function WorkflowProvider({ children }: { children: ReactNode }) {\n  const [columns, setColumns] = useState<KanbanColumn[]>(mockKanbanColumns);\n\n  const addColumn = (column: KanbanColumn) => {\n    setColumns(prev => [...prev, column]);\n  };\n\n  return (\n    <WorkflowContext.Provider value={{ columns, setColumns, addColumn }}>\n      {children}\n    </WorkflowContext.Provider>\n  );\n}\n\nexport function useWorkflow() {\n  const context = useContext(WorkflowContext);\n  if (context === undefined) {\n    throw new Error('useWorkflow must be used within a WorkflowProvider');\n  }\n  return context;\n}\n\n","size_bytes":1039},"client/src/data/mockData.ts":{"content":"// Mock data for Jira UI clone\n//todo: remove mock functionality\nimport { JiraUser, JiraProject, JiraIssue, JiraSprint, KanbanColumn } from '@shared/types';\n\nexport const mockUsers: JiraUser[] = [\n  {\n    id: '1',\n    name: 'Aryavhir koul',\n    email: 'aryavhirkoul1@gmail.com',\n    initials: 'AK',\n    avatarUrl: undefined\n  },\n  {\n    id: '2', \n    name: 'Aryavhir koul',\n    email: 'aryavhirkoul1@gmail.com',\n    initials: 'A',\n    avatarUrl: undefined\n  },\n  {\n    id: '3',\n    name: ' Aggarwal',\n    email: 'nihit6129@gmail.com', \n    initials: 'N',\n    avatarUrl: undefined\n  }\n];\n\nexport const mockProjects: JiraProject[] = [\n  {\n    id: '1',\n    key: 'JIRA',\n    name: 'JiraCloneUI',\n    description: 'Frontend repository for this project',\n    lead: mockUsers[0],\n    category: 'Development',\n    type: 'software',\n    avatarUrl: '/assets/jira-logo.jpg',\n    githubUrl: 'https://github.com/aryavhir/JiraCloneUI',\n    ProjectUrl: ''\n  },\n  {\n    id: '2', \n    key: 'PORT',\n    name: 'Portfolio-Website',\n    description: 'Portfolio website for showcasing projects',\n    lead: mockUsers[0],\n    category: 'Personal',\n    type: 'software',\n    avatarUrl: '/assets/portfolio.png',\n    githubUrl: 'https://github.com/aryavhir/portfolio-resume',\n    ProjectUrl: 'https://aryavhir.in/'\n  },\n  {\n    id: '3',\n    key: 'AI',\n    name: 'AI-studio',\n    description: 'AI-powered design tool for converting images to web pages',\n    lead: mockUsers[0],\n    category: 'Development',\n    type: 'software',\n    avatarUrl: '/assets/ai-studio.png',\n    githubUrl: 'https://github.com/aryavhir/AI-studio',\n    ProjectUrl: 'https://modelia-project.vercel.app/'\n  },\n  {\n    id: '4',\n    key: 'VID',\n    name: 'Video to site',\n    description: 'Converting a video for project to a 1-1 webpage',\n    lead: mockUsers[0],\n    category: 'Development',\n    type: 'software',\n    avatarUrl: '/assets/dots.png',\n    githubUrl: 'https://github.com/aryavhir/project-getdots.in',\n    ProjectUrl: 'https://project-getdots.vercel.app/'\n  },\n  {\n    id: '5',\n    key: 'CYBER',\n    name: 'Google Cybersecurity Certificate',\n    description: 'Portfolio exercises for Google Cybersecurity Professional Certificate (credly)',\n    lead: mockUsers[0],\n    category: 'Education',\n    type: 'business',\n    avatarUrl: undefined,\n    githubUrl: 'https://github.com/aryavhir/Google-Cybersecurity-Professional-Certificate-coursera-',\n    ProjectUrl: 'https://github.com/aryavhir/Google-Cybersecurity-Professional-Certificate-coursera-'\n  }\n];\n\nexport const mockIssues: JiraIssue[] = [\n  {\n    id: '1',\n    key: 'HYDRO-1',\n    summary: 'OpenRTB Compliant Ad Banner Development',\n    description: 'Create JavaScript ad banner that tracks impressions and dynamically places in real-time for Hydro Online adtech platform',\n    type: 'story',\n    priority: 'highest',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2024-08-01T10:00:00Z',\n    updatedAt: '2024-08-15T14:30:00Z',\n    labels: ['javascript', 'adtech', 'openrtb', 'real-time','cross-browser','html','css'],\n    comments: [\n      {\n        id: '1',\n        author: mockUsers[0],\n        body: 'Implemented cross-browser compatible ad banner with impression tracking based on percentage of banner visible.',\n        createdAt: '2024-09-10T09:15:00Z',\n        updatedAt: '2024-09-10T09:15:00Z'\n      }\n    ]\n  },\n  {\n    id: '2',\n    key: 'HYDRO-2', \n    summary: 'Advertisers Portal for Campaign Management',\n    description: 'Develop comprehensive portal using React.js, Go, and TypeScript for managing advertising campaigns',\n    type: 'epic',\n    priority: 'high',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 21,\n    createdAt: '2024-08-05T08:00:00Z',\n    updatedAt: '2024-08-20T16:45:00Z',\n    labels: ['react', 'go', 'typescript', 'campaign-management'],\n    comments: [\n  \n    ]\n  },\n  {\n    id: '3',\n    key: 'HYDRO-3',\n    summary: 'Publisher Rewards Calculation System',\n    description: 'Design and implement transparent and automated compensation system for publishers',\n    type: 'story',\n    priority: 'high',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 8,\n    createdAt: '2024-07-20T14:00:00Z',\n    updatedAt: '2024-08-10T10:15:00Z',\n    labels: ['backend', 'payments', 'automation', 'RestAPI', 'sql'],\n    comments: []\n  },\n  {\n    id: '3',\n    key: 'HYDRO-3',\n    summary: 'Enterprise Website Architecture & Performance Optimization',\n    description: 'Enhanced and managed Hydro Online’s website using Webflow by adding new pages and improved usability',\n    type: 'story',\n    priority: 'high',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 8,\n    createdAt: '2024-07-20T14:00:00Z',\n    updatedAt: '2024-08-10T10:15:00Z',\n    labels: ['frontend', 'wordpress', 'UI/UX', 'animations'],\n    comments: [\n       {\n        id: '3',\n        author: mockUsers[0],\n        body: 'Improved the website’s structure and navigation to increase user accessibility and engagement',\n        createdAt: '2024-08-20T09:45:00Z',\n        updatedAt: '2024-08-20T09:45:00Z'\n      },\n      {\n        id: '4',\n        author: mockUsers[0],\n        body: 'Worked alongside designers and content teams to maintain brand consistency and smooth user interactions.',\n        createdAt: '2024-08-20T09:45:00Z',\n        updatedAt: '2024-08-20T09:45:00Z'\n      }\n    ]\n  },\n  {\n    id: '5',\n    key: 'HYDRO-4',\n    summary: 'Decentralized File Transfer Project',\n    description: 'Implementation of decentralized file transfer system with a functional spec on secure, distributed, and peer-to-peer data sharing',\n    type: 'story',\n    priority: 'high',\n    status: 'to-do',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2025-09-10T16:00:00Z',\n    updatedAt: '2025-09-22T11:30:00Z',\n    labels: ['authentication', 'file-transfer', 'decentralized'],\n    comments: [\n \n    ]\n  },\n   {\n    id: '19',\n    key: 'HYDRO-4',\n    summary: 'Actively Interviewing For Job Switch',\n    description: 'Actively interviewing for new job opportunities to advance my career as fullstack developer/React developer',\n    type: 'story',\n    priority: 'high',\n    status: 'in-progress',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2024-08-10T16:00:00Z',\n    updatedAt: '2024-08-22T11:30:00Z',\n    labels: ['developer'],\n    comments: [\n \n    ]\n  },\n  {\n    id: '4',\n    key: 'HYDRO-4',\n    summary: 'Multi-Chain Crypto & Fiat Payment Infrastructure',\n    description: 'Integrated MoonPay and developed methods for the onramp functionality as a crypto payment gateway',\n    type: 'story',\n    priority: 'high',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2024-08-10T16:00:00Z',\n    updatedAt: '2024-08-22T11:30:00Z',\n    labels: ['web3', 'metamask', 'crypto', 'blockchain'],\n    comments: [\n      {\n        id: '3',\n        author: mockUsers[0],\n        body: 'Designed and implemented seamless PayPal payment processor via webhook and frontend SDK..',\n        createdAt: '2024-08-20T09:45:00Z',\n        updatedAt: '2024-08-20T09:45:00Z'\n      }\n    ]\n  },\n\n   \n  {\n    id: '6',\n    key: 'VOTE-1',\n    summary: 'Blockchain Voting App Development',\n    description: 'Implement secure voting mechanism using Solidity smart contracts deployed on Sepolia ETH testnet',\n    type: 'story',\n    priority: 'medium',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[3],\n    storyPoints: 13,\n    createdAt: '2024-06-01T10:00:00Z',\n    updatedAt: '2024-06-20T15:30:00Z',\n    labels: ['solidity', 'blockchain', 'voting', 'smart-contracts'],\n    comments: []\n  },\n  {\n    id: '7',\n    key: 'PORT-1',\n    summary: 'Portfolio Website Redesign',\n    description: 'Created portfolio website using React(including three.js and typescript) containing interactive 3d animations. Kept the site simple but interactive to showcase simplicity with design.',\n    type: 'story',\n    priority: 'medium',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[1],\n    storyPoints: 8,\n    createdAt: '2024-08-15T16:00:00Z',\n    updatedAt: '2024-08-25T14:20:00Z',\n    labels: ['portfolio', 'design', 'frontend', 'showcase'],\n    comments: [\n      {\n        id: '5',\n        author: mockUsers[0],\n        body: 'A website to give some insight who i am and how i work.',\n        createdAt: '2024-08-22T10:30:00Z',\n        updatedAt: '2024-08-22T10:30:00Z'\n      }\n    ]\n  },\n  {\n    id: '8',\n    key: 'AI-1',\n    summary: 'AI Image Theme  Conversion Tool',\n    description: 'Develop AI-powered tool for converting  images themes to different styles',\n    type: 'epic',\n    priority: 'medium',\n    status: 'in-progress',\n    assignee: undefined,\n    reporter: mockUsers[0],\n    project: mockProjects[4],\n    storyPoints: 21,\n    createdAt: '2024-08-20T12:00:00Z',\n    updatedAt: '2024-08-20T12:00:00Z',\n    labels: ['ai', 'machine-learning', 'design-to-code', 'automation'],\n    comments: []\n  },\n  // Project-based issues for Sprint 2\n  {\n    id: '9',\n    key: 'JIRA-1',\n    summary: 'JiraCloneUI Development',\n    description: 'Frontend repository for this project - React-based Jira clone with modern UI components',\n    type: 'story',\n    priority: 'high',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2024-08-01T10:00:00Z',\n    updatedAt: '2024-08-25T14:30:00Z',\n    labels: ['react', 'typescript', 'frontend', 'jira-clone'],\n    comments: []\n  },\n  {\n    id: '9',\n    key: 'JIRA-2',\n    summary: 'JiraCloneUI Development Stage 2',\n    description: 'BBackend repository for this project - Setting up live updates and database integration',\n    type: 'story',\n    priority: 'high',\n    status: 'to-do',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[0],\n    storyPoints: 13,\n    createdAt: '2024-08-01T10:00:00Z',\n    updatedAt: '2024-08-25T14:30:00Z',\n    labels: ['react', 'typescript', 'frontend', 'jira-clone'],\n    comments: []\n  },\n  {\n    id: '10',\n    key: 'PORT-2',\n    summary: 'Portfolio Website Development',\n    description: 'Portfolio website for showcasing projects with modern design and responsive layout',\n    type: 'story',\n    priority: 'medium',\n    status: 'in-progress',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[1],\n    storyPoints: 8,\n    createdAt: '2024-08-15T16:00:00Z',\n    updatedAt: '2024-08-25T14:20:00Z',\n    labels: ['portfolio', 'design', 'frontend', 'showcase'],\n    comments: []\n  },\n \n  {\n    id: '12',\n    key: 'VID-1',\n    summary: 'Video to WebPage ',\n    description: 'Converting a video for an Interview project to a 1-1 webpage with interactive elements and responsive design',\n    type: 'story',\n    priority: 'medium',\n    status: 'done',\n    assignee: undefined,\n    reporter: mockUsers[0],\n    project: mockProjects[3],\n    storyPoints: 13,\n    createdAt: '2024-08-20T12:00:00Z',\n    updatedAt: '2024-08-20T12:00:00Z',\n    labels: ['figma', 'conversion', 'webpage', 'UI/UX','react'],\n    comments: []\n  },\n  {\n    id: '13',\n    key: 'CYBER-1',\n    summary: 'Cybersecurity Certificate (tryhackme)',\n    description: 'Tools and skills implementation  - tryhackme rooms and projects',\n    type: 'story',\n    priority: 'medium',\n    status: 'in-progress',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[4],\n    storyPoints: 8,\n    createdAt: '2024-08-01T09:00:00Z',\n    updatedAt: '2024-08-25T16:30:00Z',\n    labels: ['cybersecurity', 'education', 'certification', 'portfolio'],\n    comments: []\n  },\n    {\n    id: '15',\n    key: 'CYBER-1',\n    summary: 'Jr.Penetration Tester (tryhackme)',\n    description: 'Preparation for the Jr.Penetration Tester exam ',\n    type: 'story',\n    priority: 'medium',\n    status: 'to-do',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[4],\n    storyPoints: 8,\n    createdAt: '2024-08-01T09:00:00Z',\n    updatedAt: '2024-08-25T16:30:00Z',\n    labels: ['cybersecurity', 'education', 'certification', 'portfolio'],\n    comments: []\n  },\n   {\n    id: '14',\n    key: 'CYBER-2',\n    summary: 'Google Cybersecurity Certificate',\n    description: 'Portfolio exercises for Google Cybersecurity Professional Certificate with practical implementations',\n    type: 'story',\n    priority: 'medium',\n    status: 'done',\n    assignee: mockUsers[0],\n    reporter: mockUsers[0],\n    project: mockProjects[4],\n    storyPoints: 8,\n    createdAt: '2025-08-01T09:00:00Z',\n    updatedAt: '2025-08-25T16:30:00Z',\n    labels: ['cybersecurity', 'wireshark', 'certification', 'john the ripper'],\n    comments: [\n       {\n        id: '5',\n        author: mockUsers[0],\n        body: 'https://www.credly.com/badges/32b4553e-244d-433d-b608-087634ca2f96/public_url to verify the credly batch',\n        createdAt: '2025-08-22T10:30:00Z',\n        updatedAt: '2025-08-22T10:30:00Z'\n      }\n    ]\n  }\n];\n\nexport const mockSprints: JiraSprint[] = [\n  {\n    id: '1',\n    name: 'Sprint 1 - Work Experience',\n    state: 'active',\n    startDate: '2024-07-01T00:00:00Z',\n    endDate: '2025-10-01T00:00:00Z',\n    goal: 'Keep track of my work experience and projects',\n    issues: [mockIssues.find(issue => issue.id === '1'), mockIssues.find(issue => issue.id === '2'), mockIssues.find(issue => issue.id === '3'), mockIssues.find(issue => issue.id === '4'), mockIssues.find(issue => issue.id === '5')].filter((issue): issue is JiraIssue => issue !== undefined)\n  },\n   {\n    id: '2',\n    name: 'Sprint 2 - Open Source/Personal  Projects',\n    state: 'active',\n    startDate: '2024-09-01T00:00:00Z',\n    endDate: 'Current',\n    goal: 'Connect all my projects and create a clear system to track personal and professional progress going forward.',\n    issues: [mockIssues.find(issue => issue.id === '6'), mockIssues.find(issue => issue.id === '7'), mockIssues.find(issue => issue.id === '8'), mockIssues.find(issue => issue.id === '9'), mockIssues.find(issue => issue.id === '10'), mockIssues.find(issue => issue.id === '12')].filter((issue): issue is JiraIssue => issue !== undefined)\n  },\n  {\n    id: '3',\n    name: 'Sprint 3 - Cybersecurity Projects',\n    state: 'active',\n    startDate: '2024-09-01T00:00:00Z',\n    endDate: 'Current',\n    goal: 'Focus on cybersecurity projects and Skill development',\n    issues: [mockIssues.find(issue => issue.id === '13'), mockIssues.find(issue => issue.id === '14'), mockIssues.find(issue => issue.id === '15')].filter((issue): issue is JiraIssue => issue !== undefined)\n  }\n];\n\nexport const mockKanbanColumns: KanbanColumn[] = [\n  {\n    id: '1',\n    title: 'TO DO',\n    status: 'to-do',\n    issues: mockIssues.filter(issue => issue.status === 'to-do'),\n    limit: 10\n  },\n  {\n    id: '2', \n    title: 'IN PROGRESS',\n    status: 'in-progress', \n    issues: mockIssues.filter(issue => issue.status === 'in-progress'),\n    limit: 3\n  },\n  {\n    id: '3',\n    title: 'DONE',\n    status: 'done',\n    issues: mockIssues.filter(issue => issue.status === 'done'),\n    limit: undefined\n  }\n];","size_bytes":15545},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Backlog.tsx":{"content":"import { useState } from 'react';\nimport JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport CreateIssueModal from '@/components/CreateIssueModal';\nimport IssueModal from '@/components/IssueModal';\nimport { Button } from '@/components/ui/button';\nimport { Plus, ChevronRight, MoreHorizontal, GripVertical } from 'lucide-react';\nimport { JiraIssue } from '@shared/types';\nimport { mockIssues, mockProjects, mockSprints, mockUsers } from '@/data/mockData';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function Backlog() {\n  const [selectedIssue, setSelectedIssue] = useState<JiraIssue | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [backlogIssues, setBacklogIssues] = useState<JiraIssue[]>(mockIssues);\n  const [expandedSprints, setExpandedSprints] = useState<Record<string, boolean>>({\n    '1': true,\n    backlog: true,\n  });\n\n  const currentProject = mockProjects[0];\n  const activeSprint = mockSprints.find(s => s.state === 'active');\n  const backlogOnlyIssues = backlogIssues.filter(\n    issue => !activeSprint?.issues.some(si => si.id === issue.id)\n  );\n\n  const handleCreateIssue = () => {\n    setShowCreateModal(true);\n  };\n\n  const handleIssueCreated = (newIssueData: {\n    summary: string;\n    description: string;\n    type: string;\n    priority: string;\n    assignee: string;\n    storyPoints?: number;\n  }) => {\n    const assigneeObj = mockUsers.find((u: any) => u.id === newIssueData.assignee || u.name === newIssueData.assignee);\n    const reporterObj = mockUsers[0];\n    const projectObj = mockProjects[0];\n    const newIssue: JiraIssue = {\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n      key: projectObj.key + '-' + (Math.floor(Math.random() * 1000) + 1),\n      summary: newIssueData.summary,\n      description: newIssueData.description,\n      type: newIssueData.type as any,\n      priority: newIssueData.priority as any,\n      status: 'to-do',\n      assignee: assigneeObj,\n      reporter: reporterObj,\n      project: projectObj,\n      storyPoints: newIssueData.storyPoints,\n      labels: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      comments: []\n    };\n\n    setBacklogIssues(prev => [...prev, newIssue]);\n    setShowCreateModal(false);\n  };\n\n  const toggleSprint = (sprintId: string) => {\n    setExpandedSprints(prev => ({ ...prev, [sprintId]: !prev[sprintId] }));\n  };\n\n  const getIssueTypeColor = (type: string) => {\n    switch (type) {\n      case 'story': return 'bg-green-500';\n      case 'bug': return 'bg-red-500';\n      case 'task': return 'bg-blue-500';\n      case 'epic': return 'bg-purple-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'highest': return '↑↑';\n      case 'high': return '↑';\n      case 'medium': return '=';\n      case 'low': return '↓';\n      case 'lowest': return '↓↓';\n      default: return '=';\n    }\n  };\n\n  return (\n    <div className=\"h-screen bg-white flex flex-col overflow-hidden\">\n      <JiraHeader onCreateIssue={handleCreateIssue} />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 flex flex-col overflow-auto\">\n          <div className=\"border-b border-jira-gray-200 bg-white sticky top-0 z-10\">\n            <div className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\">Career Backlog</h1>\n                  <p className=\"text-sm text-jira-gray-500 mt-1\">Future goals, projects, and learning objectives for my fullstack development and cybersecurity journey</p>\n                </div>\n            \n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-1 px-6 py-4\">\n            {activeSprint && (\n              <div className=\"mb-6 border border-jira-gray-200 rounded-lg\">\n                <div className=\"bg-jira-gray-50 px-4 py-3 flex items-center justify-between cursor-pointer hover:bg-jira-gray-100\" onClick={() => toggleSprint(activeSprint.id)}>\n                  <div className=\"flex items-center space-x-3\">\n                    {expandedSprints[activeSprint.id] ? <ChevronRight className=\"h-4 w-4 rotate-90 transition-transform\" /> : <ChevronRight className=\"h-4 w-4 transition-transform\" />}\n                    <h2 className=\"font-medium text-jira-gray-900\">{activeSprint.name}</h2>\n                    <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">Active</Badge>\n                    <span className=\"text-sm text-jira-gray-500\">{activeSprint.issues.length} issues</span>\n                  </div>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                {expandedSprints[activeSprint.id] && (\n                  <div className=\"p-4\">\n                    {activeSprint.goal && (\n                      <div className=\"mb-4 p-3 bg-blue-50 border-l-4 border-blue-400 rounded\">\n                        <p className=\"text-sm text-blue-900\"><span className=\"font-medium\">Sprint </span> {activeSprint.goal}</p>\n                      </div>\n                    )}\n                    <div className=\"space-y-2\">\n                      {activeSprint.issues.map(issue => (\n                        <div\n                          key={issue.id}\n                          onClick={() => setSelectedIssue(issue)}\n                          className=\"flex items-center gap-3 p-3 bg-white border border-jira-gray-200 rounded hover:bg-jira-gray-50 cursor-pointer group\"\n                        >\n                          <GripVertical className=\"h-4 w-4 text-jira-gray-400 opacity-0 group-hover:opacity-100\" />\n                          <div className={`h-5 w-5 rounded-sm ${getIssueTypeColor(issue.type)} flex items-center justify-center text-white text-xs font-bold`}>\n                            {issue.type[0].toUpperCase()}\n                          </div>\n                          <span className=\"text-sm font-medium text-jira-gray-700\">{issue.key}</span>\n                          <span className=\"flex-1 text-sm text-jira-gray-900\">{issue.summary}</span>\n                          <span className=\"text-sm text-jira-gray-500\">{getPriorityIcon(issue.priority)}</span>\n                          {issue.assignee && (\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarImage src={issue.assignee.avatarUrl} />\n                              <AvatarFallback className=\"text-xs bg-jira-blue text-white\">{issue.assignee.initials}</AvatarFallback>\n                            </Avatar>\n                          )}\n                          {issue.storyPoints && (\n                            <Badge variant=\"outline\" className=\"text-xs\">{issue.storyPoints}</Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"border border-jira-gray-200 rounded-lg\">\n              <div className=\"bg-jira-gray-50 px-4 py-3 flex items-center justify-between cursor-pointer hover:bg-jira-gray-100\" onClick={() => toggleSprint('backlog')}>\n                <div className=\"flex items-center space-x-3\">\n                  {expandedSprints.backlog ? <ChevronRight className=\"h-4 w-4 rotate-90 transition-transform\" /> : <ChevronRight className=\"h-4 w-4 transition-transform\" />}\n                  <h2 className=\"font-medium text-jira-gray-900\">Backlog</h2>\n                  <span className=\"text-sm text-jira-gray-500\">{backlogOnlyIssues.length} issues</span>\n                </div>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              {expandedSprints.backlog && (\n                <div className=\"p-4\">\n                  <div className=\"space-y-2\">\n                    {backlogOnlyIssues.length === 0 ? (\n                      <div className=\"text-center py-8 text-jira-gray-500\">\n                        <p className=\"text-sm\">Your backlog is empty</p>\n                        <Button variant=\"ghost\" onClick={handleCreateIssue} className=\"mt-2 text-jira-blue\">Create an issue</Button>\n                      </div>\n                    ) : (\n                      backlogOnlyIssues.map(issue => (\n                        <div\n                          key={issue.id}\n                          onClick={() => setSelectedIssue(issue)}\n                          className=\"flex items-center gap-3 p-3 bg-white border border-jira-gray-200 rounded hover:bg-jira-gray-50 cursor-pointer group\"\n                        >\n                          <GripVertical className=\"h-4 w-4 text-jira-gray-400 opacity-0 group-hover:opacity-100\" />\n                          <div className={`h-5 w-5 rounded-sm ${getIssueTypeColor(issue.type)} flex items-center justify-center text-white text-xs font-bold`}>\n                            {issue.type[0].toUpperCase()}\n                          </div>\n                          <span className=\"text-sm font-medium text-jira-gray-700\">{issue.key}</span>\n                          <span className=\"flex-1 text-sm text-jira-gray-900\">{issue.summary}</span>\n                          <span className=\"text-sm text-jira-gray-500\">{getPriorityIcon(issue.priority)}</span>\n                          {issue.assignee && (\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarImage src={issue.assignee.avatarUrl} />\n                              <AvatarFallback className=\"text-xs bg-jira-blue text-white\">{issue.assignee.initials}</AvatarFallback>\n                            </Avatar>\n                          )}\n                          {issue.storyPoints && (\n                            <Badge variant=\"outline\" className=\"text-xs\">{issue.storyPoints}</Badge>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <IssueModal \n        issue={selectedIssue}\n        isOpen={!!selectedIssue}\n        onClose={() => setSelectedIssue(null)}\n        onUpdate={(updates) => {\n          if (selectedIssue) {\n            setSelectedIssue({ ...selectedIssue, ...updates });\n          }\n        }}\n      />\n\n      <CreateIssueModal\n        open={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onSubmit={handleIssueCreated}\n      />\n    </div>\n  );\n}\n","size_bytes":11037},"client/src/pages/Board.tsx":{"content":"import { useState, useMemo } from 'react';\nimport JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport BoardHeader from '@/components/BoardHeader';\nimport KanbanBoard from '@/components/KanbanBoard';\nimport IssueModal from '@/components/IssueModal';\nimport CreateIssueModal from '@/components/CreateIssueModal';\nimport { FilterOptions } from '@/components/FilterDropdown';\nimport { JiraIssue, JiraSprint } from '@shared/types';\nimport { mockProjects, mockSprints } from '@/data/mockData';\nimport { mockUsers } from '@/data/mockData';\nimport { useWorkflow } from '@/contexts/WorkflowContext';\nimport { ChevronDown, ChevronRight, Calendar, Target } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function Board() {\n  const [selectedIssue, setSelectedIssue] = useState<JiraIssue | null>(null);\n  const { columns, setColumns } = useWorkflow();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [createColumnId, setCreateColumnId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [expandedSprints, setExpandedSprints] = useState<Record<string, boolean>>({\n    '1': true, // First sprint expanded by default\n    '2': false,\n    '3': false,\n  });\n  const [filters, setFilters] = useState<FilterOptions>({\n    statuses: [],\n    labels: [],\n  });\n\n  const handleIssueClick = (issue: JiraIssue) => {\n    console.log('Opening issue:', issue.key);\n    setSelectedIssue(issue);\n  };\n\n  const handleIssueMove = (issueId: string, fromStatus: any, toStatus: any) => {\n    console.log(`Issue ${issueId} moved from ${fromStatus} to ${toStatus}`);\n    \n    // Update the columns state with the moved issue\n    setColumns(prevColumns => {\n      let movedIssue: JiraIssue | null = null;\n      \n      // Find and remove the issue from the source column\n      const updatedColumns = prevColumns.map(column => {\n        if (column.status === fromStatus) {\n          const issue = column.issues.find(i => i.id === issueId);\n          if (issue) {\n            movedIssue = { ...issue, status: toStatus };\n            return { ...column, issues: column.issues.filter(i => i.id !== issueId) };\n          }\n        }\n        return column;\n      });\n      \n      // Add the issue to the destination column\n      if (movedIssue) {\n        return updatedColumns.map(column => {\n          if (column.status === toStatus) {\n            return { ...column, issues: [...column.issues, movedIssue!] };\n          }\n          return column;\n        });\n      }\n      \n      return updatedColumns;\n    });\n  };\n\n  const handleAddIssue = (columnId: string) => {\n    console.log('Add issue to column:', columnId);\n    setCreateColumnId(columnId);\n    setShowCreateModal(true);\n  };\n\n  const handleCreateIssue = () => {\n    setCreateColumnId(undefined);\n    setShowCreateModal(true);\n  };\n\n  const handleIssueCreated = (newIssueData: {\n    summary: string;\n    description: string;\n    type: string;\n    priority: string;\n    assignee: string;\n    storyPoints?: number;\n  }) => {\n    const modalData = newIssueData;\n    const assigneeObj = mockUsers.find((u: any) => u.id === modalData.assignee || u.name === modalData.assignee);\n    const reporterObj = mockUsers[0]; // Default to first user for demo\n    const projectObj = mockProjects[0]; // Default to first project for demo\n    \n    // Determine the target column and status\n    const targetColumnId = createColumnId || '1'; // Default to \"TO DO\" column\n    let targetStatus: 'to-do' | 'in-progress' | 'done' = 'to-do';\n    \n    if (targetColumnId === '1') targetStatus = 'to-do';\n    else if (targetColumnId === '2') targetStatus = 'in-progress';\n    else if (targetColumnId === '3') targetStatus = 'done';\n    \n    const newIssue: JiraIssue = {\n      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n      key: projectObj.key + '-' + (Math.floor(Math.random() * 1000) + 1),\n      summary: modalData.summary || '',\n      description: modalData.description || '',\n      type: modalData.type as any || 'task',\n      priority: modalData.priority as any || 'medium',\n      status: targetStatus,\n      assignee: assigneeObj,\n      reporter: reporterObj,\n      project: projectObj,\n      storyPoints: modalData.storyPoints,\n      labels: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      comments: []\n    };\n\n    // Add issue to the appropriate column\n    setColumns(prevColumns =>\n      prevColumns.map(column =>\n        column.id === targetColumnId\n          ? { ...column, issues: [...column.issues, newIssue] }\n          : column\n      )\n    );\n\n    setShowCreateModal(false);\n    setCreateColumnId(undefined);\n  };\n\n  // Get all issues from columns for filtering\n  const allIssues = useMemo(() => {\n    return columns.flatMap(column => column.issues);\n  }, [columns]);\n\n  // Apply filters and search to issues\n  const filteredColumns = useMemo(() => {\n    return columns.map(column => ({\n      ...column,\n      issues: column.issues.filter(issue => {\n        // Search filter\n        if (searchQuery) {\n          const searchLower = searchQuery.toLowerCase();\n          const matchesSearch = \n            issue.key.toLowerCase().includes(searchLower) ||\n            issue.summary.toLowerCase().includes(searchLower) ||\n            issue.description.toLowerCase().includes(searchLower) ||\n            issue.assignee?.name.toLowerCase().includes(searchLower) ||\n            issue.reporter.name.toLowerCase().includes(searchLower) ||\n            issue.labels.some(label => label.toLowerCase().includes(searchLower));\n          \n          if (!matchesSearch) return false;\n        }\n\n        // Status filter\n        if (filters.statuses.length > 0 && !filters.statuses.includes(issue.status)) {\n          return false;\n        }\n\n        // Labels filter (Skills)\n        if (filters.labels.length > 0) {\n          const hasMatchingLabel = filters.labels.some(label => issue.labels.includes(label));\n          if (!hasMatchingLabel) return false;\n        }\n\n        return true;\n      })\n    }));\n  }, [columns, searchQuery, filters]);\n\n  const handleBoardSearch = (query: string) => {\n    console.log('Searching board:', query);\n    setSearchQuery(query);\n  };\n\n  const handleFilterChange = (newFilters: FilterOptions) => {\n    console.log('Filters changed:', newFilters);\n    setFilters(newFilters);\n  };\n\n  const handleIssueUpdate = (updates: Partial<JiraIssue>) => {\n    if (!selectedIssue) return;\n    \n    console.log('Updating issue:', selectedIssue.key, updates);\n    \n    // Check if status is being updated (which means moving between columns)\n    if (updates.status && updates.status !== selectedIssue.status) {\n      setColumns(prevColumns => {\n        let issueToMove: JiraIssue | null = null;\n        \n        // Remove from current column and update the issue\n        const columnsAfterRemoval = prevColumns.map(column => {\n          if (column.issues.find(i => i.id === selectedIssue.id)) {\n            const issue = column.issues.find(i => i.id === selectedIssue.id);\n            if (issue) {\n              issueToMove = { ...issue, ...updates };\n              return { ...column, issues: column.issues.filter(i => i.id !== selectedIssue.id) };\n            }\n          }\n          return column;\n        });\n        \n        // Add to new column\n        if (issueToMove) {\n          return columnsAfterRemoval.map(column => {\n            if (column.status === updates.status) {\n              return { ...column, issues: [...column.issues, issueToMove!] };\n            }\n            return column;\n          });\n        }\n        \n        return columnsAfterRemoval;\n      });\n    } else {\n      // Update issue in place (no status change)\n      setColumns(prevColumns => \n        prevColumns.map(column => ({\n          ...column,\n          issues: column.issues.map(issue => \n            issue.id === selectedIssue.id \n              ? { ...issue, ...updates }\n              : issue\n          )\n        }))\n      );\n    }\n    \n    // Update local state for the modal\n    const updatedIssue = { ...selectedIssue, ...updates };\n    setSelectedIssue(updatedIssue);\n  };\n\n  const toggleSprintExpansion = (sprintId: string) => {\n    setExpandedSprints(prev => ({\n      ...prev,\n      [sprintId]: !prev[sprintId]\n    }));\n  };\n\n  // Get active sprints\n  const activeSprints = mockSprints.filter(sprint => sprint.state === 'active');\n\n  // Function to get columns for a specific sprint (applying filters)\n  const getColumnsForSprint = (sprint: JiraSprint) => {\n    const sprintIssues = sprint.issues || [];\n    return filteredColumns.map(column => ({\n      ...column,\n      issues: column.issues.filter(issue => \n        sprintIssues.some(sprintIssue => sprintIssue && sprintIssue.id === issue.id)\n      )\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader \n        onMobileMenuToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n      />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar \n          isMobileMenuOpen={isMobileMenuOpen}\n          onMobileMenuClose={() => setIsMobileMenuOpen(false)}\n        />\n        \n        <main className=\"flex-1 flex flex-col overflow-hidden\">\n          <BoardHeader \n            onSearch={handleBoardSearch}\n            onFilterChange={handleFilterChange}\n            onCreateIssue={handleCreateIssue}\n            filters={filters}\n            issues={allIssues}\n          />\n          \n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"md:p-4\">\n              {activeSprints.map((sprint) => {\n                const isExpanded = expandedSprints[sprint.id];\n                const sprintColumns = getColumnsForSprint(sprint);\n                const totalIssues = sprintColumns.reduce((sum, col) => sum + col.issues.length, 0);\n                \n                return (\n                  <div key={sprint.id} className=\"bg-white border-b md:border md:border-jira-gray-200 md:rounded-lg md:mb-4 overflow-hidden\">\n                    {/* Sprint Header */}\n                    <div \n                      className=\"p-3 sm:p-4 border-b border-jira-gray-200 cursor-pointer hover:bg-jira-gray-50 active:bg-jira-gray-100 transition-colors\"\n                      onClick={() => toggleSprintExpansion(sprint.id)}\n                      data-testid={`sprint-header-${sprint.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2 sm:space-x-3 flex-1 min-w-0\">\n                          {isExpanded ? (\n                            <ChevronDown className=\"h-5 w-5 text-jira-gray-500 flex-shrink-0\" />\n                          ) : (\n                            <ChevronRight className=\"h-5 w-5 text-jira-gray-500 flex-shrink-0\" />\n                          )}\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"text-base sm:text-lg font-semibold text-jira-gray-900 truncate\">\n                              {sprint.name}\n                            </h3>\n                            <div className=\"flex flex-wrap items-center gap-x-3 gap-y-1 text-xs sm:text-sm text-jira-gray-500 mt-1\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Calendar className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                <span className=\"truncate\">\n                                  {sprint.startDate ? new Date(sprint.startDate).toLocaleDateString() : 'TBD'} - \n                                  {sprint.endDate === 'Current' ? ' Current' : (sprint.endDate ? new Date(sprint.endDate).toLocaleDateString() : 'TBD')}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Target className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                                <span>{totalIssues} issues</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2 flex-shrink-0 ml-2\">\n                          <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 border-green-200 text-xs\">\n                            Active\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {sprint.goal && (\n                        <div className=\"mt-3 p-2 sm:p-3 bg-blue-50 border-l-4 border-blue-400 rounded\">\n                          <p className=\"text-xs sm:text-sm text-blue-900\">\n                            <span className=\"font-medium\">Sprint Goal:</span> {sprint.goal}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Sprint Content */}\n                    {isExpanded && (\n                      <div className=\"p-2 sm:p-4\">\n                        <KanbanBoard \n                          columns={sprintColumns}\n                          onIssueMove={handleIssueMove}\n                          onIssueClick={handleIssueClick}\n                          onAddIssue={handleAddIssue}\n                        />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <IssueModal \n        issue={selectedIssue}\n        isOpen={!!selectedIssue}\n        onClose={() => setSelectedIssue(null)}\n        onUpdate={handleIssueUpdate}\n      />\n\n      <CreateIssueModal\n        open={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onSubmit={handleIssueCreated}\n      />\n    </div>\n  );\n}","size_bytes":14134},"client/src/pages/Code.tsx":{"content":"import { useState } from 'react';\nimport JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { GitBranch, GitMerge, GitPullRequest, Plus, Search, Filter, ExternalLink } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { mockProjects, mockUsers } from '@/data/mockData';\n\ninterface Repository {\n  id: string;\n  name: string;\n  description: string;\n  branches: number;\n  pullRequests: number;\n  lastCommit: string;\n  githubUrl: string;\n}\n\ninterface PullRequest {\n  id: string;\n  title: string;\n  number: number;\n  author: typeof mockUsers[0];\n  status: string;\n  branch: string;\n  targetBranch: string;\n  createdAt: string;\n  comments: number;\n  approvals: number;\n  githubUrl: string;\n}\n\nconst initialRepositories: Repository[] = [\n  {\n    id: '1',\n    name: 'Frontend',\n    description: 'Frontend repository for this project',\n    branches: 3,\n    pullRequests: 3,\n    lastCommit: '2 hours ago',\n    githubUrl: 'https://github.com/aryavhir/JiraCloneUI',\n  },\n  {\n    id: '2',\n    name: 'Portfolio-Website',\n    description: 'Portfolio website for showcasing projects',\n    branches: 8,\n    pullRequests: 13,\n    lastCommit: '21 hours ago',\n    githubUrl: 'https://github.com/aryavhir/portfolio-resume',\n  },\n    {\n    id: '2',\n    name: 'AI-studio',\n    description: 'AI-powered design tool for converting images to web pages',\n    branches: 8,\n    pullRequests: 11,\n    lastCommit: '20 days ago',\n    githubUrl: 'https://github.com/aryavhir/AI-studio',\n  },\n\n    {\n    id: '2',\n    name: 'Video to site ',\n    description: 'Converting a video for project to a 1-1 webpage',\n    branches: 8,\n    pullRequests: 23,\n    lastCommit: '13 days ago',\n    githubUrl: 'https://github.com/aryavhir/project-getdots.in',\n  },\n      {\n    id: '2',\n    name: 'Google-Cybersecurity-Professional-Certificate-coursera',\n    description: 'Portfolio exercises for Google Cybersecurity Professional Certificate (credly)',\n    branches: 8,\n    pullRequests: 19,\n    lastCommit: '1 month ago',\n    githubUrl: 'https://github.com/aryavhir/Google-Cybersecurity-Professional-Certificate-coursera-',\n  },\n];\n\nconst initialPullRequests: PullRequest[] = [\n  {\n    id: '1',\n    title: 'Add react memoization and the Enhance keyboard navigation',\n    number: 16,\n    author: mockUsers[1],\n    status: 'merged',\n    branch: 'feature/testing-libraries',\n    targetBranch: 'dev',\n    createdAt: '2 months ago',\n    comments: 1,\n    approvals: 2,\n    githubUrl: 'https://github.com/aryavhir/AI-studio/pull/4',\n  },\n   {\n    id: '1',\n    title: 'fixing-deployment isssue',\n    number: 12,\n    author: mockUsers[1],\n    status: 'merged',\n    branch: 'bugs/fix-vercel-deploy',\n    targetBranch: 'main',\n    createdAt: '5 days ago',\n    comments: 2,\n    approvals: 2,\n    githubUrl: 'https://github.com/aryavhir/AI-studio/pull/10',\n  },\n    {\n    id: '1',\n    title: 'pr-dev-to-stage-final-draft ',\n    number: 42,\n    author: mockUsers[1],\n    status: 'closed',\n    branch: 'feature/auth-flow',\n    targetBranch: 'main',\n    createdAt: '22 days ago',\n    comments: 4,\n    approvals: 1,\n    githubUrl: 'https://github.com/aryavhir/project-getdots.in/pull/2',\n  },\n];\n\nexport default function Code() {\n  const currentProject = mockProjects[0];\n  const [repositories, setRepositories] = useState<Repository[]>(initialRepositories);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showAddRepo, setShowAddRepo] = useState(false);\n  const [newRepo, setNewRepo] = useState({\n    name: '',\n    description: '',\n    githubUrl: ''\n  });\n\n  const filteredRepos = repositories.filter(repo =>\n    repo.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    repo.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddRepository = () => {\n    const repo: Repository = {\n      id: Date.now().toString(),\n      name: newRepo.name,\n      description: newRepo.description,\n      branches: 1,\n      pullRequests: 0,\n      lastCommit: 'Just now',\n      githubUrl: newRepo.githubUrl || `https://github.com/example/${newRepo.name}`,\n    };\n\n    setRepositories([...repositories, repo]);\n    setShowAddRepo(false);\n    setNewRepo({ name: '', description: '', githubUrl: '' });\n  };\n\n  const handleViewRepo = (repo: Repository) => {\n    window.open(repo.githubUrl, '_blank');\n  };\n\n  const handleReviewPR = (pr: PullRequest) => {\n    window.open(pr.githubUrl, '_blank');\n  };\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 flex flex-col overflow-auto\">\n          <div className=\"border-b border-jira-gray-200 bg-white sticky top-0 z-10\">\n            <div className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\">Code</h1>\n                  <p className=\"text-sm text-jira-gray-500 mt-1\">{currentProject.name}</p>\n                </div>\n                <Button \n                  className=\"bg-jira-blue hover:bg-jira-blue-dark text-white\"\n                  onClick={() => setShowAddRepo(true)}\n                  data-testid=\"button-add-repository\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add repository\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-1 px-6 py-6\">\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-lg font-medium text-jira-gray-900\">Top Repositories</h2>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-jira-gray-400 h-4 w-4\" />\n                  <Input\n                    type=\"search\"\n                    placeholder=\"Search repositories\"\n                    className=\"pl-10 w-64 h-9 bg-white border-jira-gray-200\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-search-repos\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                {filteredRepos.map(repo => (\n                  <div key={repo.id} className=\"bg-white border border-jira-gray-200 rounded-lg p-4 hover:border-jira-blue transition-colors\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <GitBranch className=\"h-4 w-4 text-jira-gray-500\" />\n                          <h3 className=\"font-medium text-jira-gray-900\">{repo.name}</h3>\n                        </div>\n                        <p className=\"text-sm text-jira-gray-500 mt-1\">{repo.description}</p>\n                        <div className=\"flex items-center gap-6 mt-3 text-sm text-jira-gray-500\">\n                          <span className=\"flex items-center gap-1\">\n                            <GitBranch className=\"h-3 w-3\" />\n                            {repo.branches} branches\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <GitPullRequest className=\"h-3 w-3\" />\n                            {repo.pullRequests} pull requests\n                          </span>\n                          <span>Last commit {repo.lastCommit}</span>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleViewRepo(repo)}\n                        data-testid={`button-view-repo-${repo.id}`}\n                      >\n                        <ExternalLink className=\"h-4 w-4 mr-1\" />\n                        View repository\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-lg font-medium text-jira-gray-900\">Pull Requests</h2>\n            \n              </div>\n              \n              <div className=\"space-y-3\">\n                {initialPullRequests.map(pr => (\n                  <div key={pr.id} className=\"bg-white border border-jira-gray-200 rounded-lg p-4 hover:border-jira-blue transition-colors\">\n                    <div className=\"flex items-start gap-3\">\n                      <GitPullRequest className=\"h-5 w-5 text-green-500 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-medium text-jira-gray-900\">{pr.title}</h3>\n                          <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">#{pr.number}</Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-2 text-sm text-jira-gray-500\">\n                          <Avatar className=\"h-5 w-5\">\n                            <AvatarImage src={pr.author.avatarUrl} />\n                            <AvatarFallback className=\"text-xs bg-jira-blue text-white\">{pr.author.initials}</AvatarFallback>\n                          </Avatar>\n                          <span>{pr.author.name}</span>\n                          <span>wants to merge</span>\n                          <code className=\"px-2 py-0.5 bg-jira-gray-100 rounded text-xs\">{pr.branch}</code>\n                          <GitMerge className=\"h-3 w-3\" />\n                          <code className=\"px-2 py-0.5 bg-jira-gray-100 rounded text-xs\">{pr.targetBranch}</code>\n                        </div>\n                        <div className=\"flex items-center gap-4 mt-3 text-sm text-jira-gray-500\">\n                          <span>{pr.createdAt}</span>\n                          <span>{pr.comments} comments</span>\n                          <span className=\"flex items-center gap-1 text-green-600\">\n                            ✓ {pr.approvals} approvals\n                          </span>\n                        </div>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleReviewPR(pr)}\n                        data-testid={`button-review-pr-${pr.id}`}\n                      >\n                        <ExternalLink className=\"h-4 w-4 mr-1\" />\n                        Review\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Add Repository Dialog */}\n      <Dialog open={showAddRepo} onOpenChange={setShowAddRepo}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Repository</DialogTitle>\n            <DialogDescription>\n              Connect a GitHub repository to your project\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"repo-name\">Repository Name *</Label>\n              <Input\n                id=\"repo-name\"\n                placeholder=\"e.g., my-awesome-repo\"\n                value={newRepo.name}\n                onChange={(e) => setNewRepo({ ...newRepo, name: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"repo-description\">Description</Label>\n              <Input\n                id=\"repo-description\"\n                placeholder=\"Brief description of the repository\"\n                value={newRepo.description}\n                onChange={(e) => setNewRepo({ ...newRepo, description: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"repo-url\">GitHub URL</Label>\n              <Input\n                id=\"repo-url\"\n                placeholder=\"https://github.com/username/repo\"\n                value={newRepo.githubUrl}\n                onChange={(e) => setNewRepo({ ...newRepo, githubUrl: e.target.value })}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddRepo(false)}>Cancel</Button>\n            <Button onClick={handleAddRepository}>Add Repository</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13203},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useMemo } from \"react\";\nimport { BarChart3, TrendingUp, Clock, CheckCircle2, AlertCircle, Users, Calendar, Activity, Briefcase, Award, Code } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport JiraHeader from \"@/components/JiraHeader\";\nimport JiraSidebar from \"@/components/JiraSidebar\";\nimport { mockUsers, mockIssues } from \"@/data/mockData\";\n\nexport default function Dashboard() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  \n  // Get current user (Aryavhir Koul)\n  const currentUser = mockUsers[0];\n  \n  // Get actual TODO issues assigned to current user\n  const assignedToMe = useMemo(() => {\n    return mockIssues.filter(issue => issue.assignee?.id === currentUser.id && issue.status === 'to-do');\n  }, [currentUser.id]);\n  \n  // Calculate stats from actual data\n  const projectStats = useMemo(() => {\n    const totalIssues = mockIssues.length;\n    const completedIssues = mockIssues.filter(issue => issue.status === 'done').length;\n    const inProgressIssues = mockIssues.filter(issue => issue.status === 'in-progress').length;\n    const todoIssues = mockIssues.filter(issue => issue.status === 'to-do').length;\n    const userCompletedIssues = assignedToMe.filter(issue => issue.status === 'done').length;\n    const userInProgressIssues = assignedToMe.filter(issue => issue.status === 'in-progress').length;\n    const userTodoIssues = assignedToMe.filter(issue => issue.status === 'to-do').length;\n    \n    return {\n      totalIssues,\n      completedIssues,\n      inProgressIssues,\n      todoIssues,\n      userCompletedIssues,\n      userInProgressIssues,\n      userTodoIssues,\n      averageVelocity: 24,\n      sprintProgress: Math.round((completedIssues / totalIssues) * 100)\n    };\n  }, [assignedToMe]);\n  \n  // Work experience data\n  const workExperience = [\n    {\n      id: \"1\",\n      company: \"Hydro Online\",\n      role: \"Full Stack Developer\",\n      duration: \"Q3 2024 - Present\",\n      description: \"Developing adtech platform with React.js, Go, and blockchain integrations. Working on OpenRTB compliant ad banners, advertisers portal, publisher rewards system, and multi-chain crypto payment infrastructure.\",\n      technologies: [\"React\", \"Go\", \"TypeScript\", \"Blockchain\", \"Web3\", \"OpenRTB\", \"AdTech\", \"Payment Systems\", \"SQL\", \"REST API\"]\n    }\n  ];\n\n\n  return (\n    <div className=\"min-h-screen bg-jira-gray-50 flex flex-col overflow-x-hidden\">\n      <JiraHeader onMobileMenuToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)} />\n      \n      <div className=\"flex flex-1 overflow-x-hidden\">\n        <JiraSidebar \n          isMobileMenuOpen={isMobileMenuOpen}\n          onMobileMenuClose={() => setIsMobileMenuOpen(false)}\n        />\n        <main className=\"p-3 sm:p-6 space-y-4 sm:space-y-6 flex-1 overflow-y-auto\" data-testid=\"page-dashboard\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between space-y-3 sm:space-y-0\">\n        <div className=\"flex items-center space-x-4\">\n          <Avatar className=\"h-12 w-12\">\n            <AvatarImage src={currentUser.avatarUrl} alt={currentUser.name} />\n            <AvatarFallback className=\"bg-jira-blue text-white text-lg font-medium\">\n              {currentUser.initials}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <h1 className=\"text-xl sm:text-2xl font-bold\" data-testid=\"text-dashboard-title\">\n              Welcome back, {currentUser.name}!\n            </h1>\n            <p className=\"text-sm sm:text-base text-muted-foreground\">\n              Full Stack Developer & Blockchain Enthusiast\n            </p>\n          </div>\n        </div>\n        <Button asChild className=\"w-full sm:w-auto\" data-testid=\"button-view-board\">\n          <Link href=\"/board\">View Board</Link>\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6\">\n        <Card data-testid=\"card-assigned-issues\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">To Do</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{projectStats.todoIssues}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total issues in to do\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-completed-issues\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Done</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{projectStats.completedIssues}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total issues in done\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-in-progress-issues\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">In Progress</CardTitle>\n            <Clock className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{projectStats.inProgressIssues}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total issues in progress\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-skills\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Technologies</CardTitle>\n            <Code className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">15+</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Technologies mastered\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-1 gap-6\">\n        {/* Assigned to Me */}\n        <Card data-testid=\"card-assigned-to-me\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              Assigned to Me\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {assignedToMe.slice(0, 3).map(issue => (\n              <div key={issue.id} className=\"space-y-1\" data-testid={`assigned-issue-${issue.key}`}>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-mono text-muted-foreground\">{issue.key}</span>\n                  <Badge \n                    variant={issue.priority === \"high\" ? \"destructive\" : issue.priority === \"medium\" ? \"default\" : \"secondary\"}\n                    className=\"text-xs\"\n                  >\n                    {issue.priority}\n                  </Badge>\n                </div>\n                <p className=\"text-sm\">{issue.summary}</p>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {issue.labels.slice(0, 3).map(label => (\n                    <Badge key={label} variant=\"outline\" className=\"text-xs\">\n                      {label}\n                    </Badge>\n                  ))}\n                  {issue.labels.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{issue.labels.length - 3}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ))}\n            <Button asChild variant=\"outline\" size=\"sm\" className=\"w-full mt-4\" data-testid=\"button-view-all-assigned\">\n              <Link href=\"/backlog\">View All Issues</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Work Experience Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-1 gap-6\">\n        <Card data-testid=\"card-work-experience\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Briefcase className=\"w-5 h-5\" />\n              Work Experience\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {workExperience.map(experience => (\n              <div key={experience.id} className=\"space-y-2 p-4 border border-muted rounded-lg\" data-testid={`experience-${experience.id}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-semibold text-lg\">{experience.role}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{experience.company}</p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {experience.duration}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{experience.description}</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {experience.technologies.map(tech => (\n                    <Badge key={tech} variant=\"secondary\" className=\"text-xs\">\n                      {tech}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            ))}\n            <div className=\"flex justify-center\">\n              <Button asChild variant=\"outline\" size=\"sm\" data-testid=\"button-view-portfolio\">\n                <a href=\"https://aryavhir.in\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  View Portfolio\n                </a>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10218},"client/src/pages/Filters.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Filter, Plus, Star, Clock, User, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useState } from 'react';\n\ninterface SavedFilter {\n  id: string;\n  name: string;\n  description: string;\n  issueCount: number;\n  starred: boolean;\n  lastUsed: string;\n  owner: string;\n}\n\nconst mockFilters: SavedFilter[] = [\n  {\n    id: '1',\n    name: 'My open issues',\n    description: 'Issues assigned to me that are not done',\n    issueCount: 5,\n    starred: true,\n    lastUsed: '2 hours ago',\n    owner: 'Aryavhir koul',\n  },\n  {\n    id: '2',\n    name: 'Reported by me',\n    description: 'All issues I have reported',\n    issueCount: 8,\n    starred: false,\n    lastUsed: '1 day ago',\n    owner: 'Aryavhir koul',\n  },\n  {\n    id: '3',\n    name: 'Recently updated',\n    description: 'Issues updated in the last 7 days',\n    issueCount: 12,\n    starred: true,\n    lastUsed: '3 hours ago',\n    owner: 'Aryavhir koul',\n  },\n  {\n    id: '4',\n    name: 'High priority bugs',\n    description: 'All bugs with high or highest priority',\n    issueCount: 3,\n    starred: false,\n    lastUsed: '5 days ago',\n    owner: 'Aryavhir koul',\n  },\n  {\n    id: '5',\n    name: 'Sprint backlog',\n    description: 'Issues in the current sprint',\n    issueCount: 15,\n    starred: false,\n    lastUsed: '1 week ago',\n    owner: 'Sarah Johnson',\n  },\n];\n\nexport default function Filters() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<SavedFilter[]>(mockFilters);\n\n  const toggleStar = (id: string) => {\n    setFilters(prev =>\n      prev.map(filter =>\n        filter.id === id ? { ...filter, starred: !filter.starred } : filter\n      )\n    );\n  };\n\n  const filteredFilters = filters.filter(filter =>\n    filter.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    filter.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const myFilters = filteredFilters.filter(f => f.owner === 'You');\n  const starredFilters = filteredFilters.filter(f => f.starred);\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-3\">\n                  <Filter className=\"h-6 w-6 text-jira-blue\" />\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\" data-testid=\"text-filters-title\">\n                    Filters\n                  </h1>\n                </div>\n                <Button data-testid=\"button-create-filter\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Filter\n                </Button>\n              </div>\n              <p className=\"text-sm text-jira-gray-600 mb-4\">\n                Save and manage your custom issue filters\n              </p>\n\n              <div className=\"relative max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-jira-gray-400 h-4 w-4\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search filters...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-filters\"\n                />\n              </div>\n            </div>\n\n            <Tabs defaultValue=\"my-filters\" className=\"w-full\">\n              <TabsList className=\"mb-6\" data-testid=\"tabs-filters\">\n                <TabsTrigger value=\"my-filters\" data-testid=\"tab-my-filters\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  My Filters\n                </TabsTrigger>\n                <TabsTrigger value=\"starred\" data-testid=\"tab-starred\">\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Starred\n                </TabsTrigger>\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  All Filters\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"my-filters\" className=\"space-y-3\">\n                {myFilters.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Filter className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No filters found</p>\n                    <Button className=\"mt-4\" data-testid=\"button-create-first-filter\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create Your First Filter\n                    </Button>\n                  </div>\n                ) : (\n                  myFilters.map(filter => (\n                    <Card key={filter.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <CardTitle className=\"text-lg\">{filter.name}</CardTitle>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {filter.issueCount} issues\n                              </Badge>\n                            </div>\n                            <CardDescription>{filter.description}</CardDescription>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            onClick={() => toggleStar(filter.id)}\n                            data-testid={`button-star-${filter.id}`}\n                          >\n                            <Star\n                              className={`h-4 w-4 ${\n                                filter.starred ? 'fill-yellow-400 text-yellow-400' : ''\n                              }`}\n                            />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex items-center justify-between text-sm text-jira-gray-600\">\n                          <div className=\"flex items-center gap-4\">\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              Last used {filter.lastUsed}\n                            </span>\n                            <span>Owner: {filter.owner}</span>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${filter.id}`}>\n                              View Results\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${filter.id}`}>\n                              Edit\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"starred\" className=\"space-y-3\">\n                {starredFilters.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Star className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No starred filters yet</p>\n                    <p className=\"text-sm text-jira-gray-500 mt-2\">\n                      Star filters to quickly find them here\n                    </p>\n                  </div>\n                ) : (\n                  starredFilters.map(filter => (\n                    <Card key={filter.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <CardTitle className=\"text-lg\">{filter.name}</CardTitle>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {filter.issueCount} issues\n                              </Badge>\n                            </div>\n                            <CardDescription>{filter.description}</CardDescription>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            onClick={() => toggleStar(filter.id)}\n                          >\n                            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex items-center justify-between text-sm text-jira-gray-600\">\n                          <div className=\"flex items-center gap-4\">\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              Last used {filter.lastUsed}\n                            </span>\n                            <span>Owner: {filter.owner}</span>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              View Results\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              Edit\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"all\" className=\"space-y-3\">\n                {filteredFilters.map(filter => (\n                  <Card key={filter.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <CardTitle className=\"text-lg\">{filter.name}</CardTitle>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {filter.issueCount} issues\n                            </Badge>\n                          </div>\n                          <CardDescription>{filter.description}</CardDescription>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8\"\n                          onClick={() => toggleStar(filter.id)}\n                        >\n                          <Star\n                            className={`h-4 w-4 ${\n                              filter.starred ? 'fill-yellow-400 text-yellow-400' : ''\n                            }`}\n                          />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between text-sm text-jira-gray-600\">\n                        <div className=\"flex items-center gap-4\">\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            Last used {filter.lastUsed}\n                          </span>\n                          <span>Owner: {filter.owner}</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            View Results\n                          </Button>\n                          {filter.owner === 'You' && (\n                            <Button variant=\"ghost\" size=\"sm\">\n                              Edit\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13305},"client/src/pages/Help.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { HelpCircle, Book, Video, MessageCircle, FileText, ExternalLink, Search, Settings } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useState } from 'react';\nimport { resetStartupOverlay } from '@/utils/startup';\n\nconst helpTopics = [\n  {\n    id: '1',\n    category: 'About Aryavhir Koul',\n    icon: Book,\n    articles: [\n      { title: 'Professional Background', description: 'Learn about Aryavhir\\'s experience as a Software Development Engineer at Hydro Online' },\n      { title: 'Cybersecurity Expertise', description: 'Google Cybersecurity Certificate and TryHackMe training achievements' },\n      { title: 'Technical Skills', description: 'Full-stack development, blockchain, and security technologies' },\n      { title: 'Personal Projects', description: 'Portfolio of 15+ deployed websites and open-source contributions' },\n    ],\n  },\n  {\n    id: '2',\n    category: 'Current Work at Hydro Online',\n    icon: FileText,\n    articles: [\n      { title: 'AdTech Platform Development', description: 'OpenRTB compliant JavaScript ad banners with real-time tracking' },\n      { title: 'Campaign Management Portal', description: 'React.js, Go, and TypeScript based advertiser dashboard' },\n      { title: 'Publisher Rewards System', description: 'Automated compensation calculation and payment processing' },\n      { title: 'Crypto Payment Integration', description: 'MetaMask, MoonPay, and PayPal payment solutions' },\n    ],\n  },\n  {\n    id: '3',\n    category: 'Cybersecurity Projects',\n    icon: MessageCircle,\n    articles: [\n      { title: 'Security Audits & Assessments', description: 'Vulnerability scanning and compliance verification projects' },\n      { title: 'Incident Response Training', description: 'Simulated data breach scenarios and recovery procedures' },\n      { title: 'Blockchain Security', description: 'Smart contract audits and DeFi protocol assessments' },\n      { title: 'Security Tool Development', description: 'Open-source tools for automated vulnerability scanning' },\n    ],\n  },\n];\n\nconst popularResources = [\n  {\n    title: 'Portfolio Website',\n    description: 'Visit aryavhir.in to see all projects and achievements',\n    icon: ExternalLink,\n    link: 'https://aryavhir.in'\n  },\n  {\n    title: 'GitHub Profile',\n    description: 'Explore open-source contributions and project repositories',\n    icon: ExternalLink,\n    link: 'https://github.com/aryavhir'\n  },\n  {\n    title: 'LinkedIn Profile',\n    description: 'Connect professionally and view career updates',\n    icon: ExternalLink,\n    link: 'https://linkedin.com/in/Aryavhir koul'\n  },\n  {\n    title: 'Cybersecurity Certificates',\n    description: 'View Google Cybersecurity Certificate and other achievements',\n    icon: ExternalLink,\n    link: 'https://github.com/aryavhir/Google-Cybersecurity-Professional-Certificate-coursera-'\n  },\n];\n\nexport default function Help() {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto p-6\">\n            <div className=\"mb-8 text-center\">\n              <div className=\"flex items-center justify-center gap-3 mb-4\">\n                <div className=\"p-3 bg-jira-blue-light rounded-full\">\n                  <HelpCircle className=\"h-8 w-8 text-jira-blue\" />\n                </div>\n                <h1 className=\"text-3xl font-semibold text-jira-gray-900\" data-testid=\"text-help-title\">\n                  About Aryavhir Koul\n                </h1>\n              </div>\n              <p className=\"text-lg text-jira-gray-600 max-w-2xl mx-auto\">\n                Learn about Aryavhir's professional journey, technical expertise, and current projects in cybersecurity and full-stack development.\n              </p>\n\n              <div className=\"max-w-2xl mx-auto relative\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-jira-gray-400 h-5 w-5\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search for help articles, guides, and tutorials...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-12 pr-4 py-6 text-base\"\n                  data-testid=\"input-help-search\"\n                />\n              </div>\n            </div>\n\n            <div className=\"mb-8\">\n              <h2 className=\"text-xl font-semibold text-jira-gray-900 mb-4\">Popular Resources</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {popularResources.map((resource) => {\n                  const IconComponent = resource.icon;\n                  return (\n                    <Card key={resource.title} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <div className=\"p-2 bg-jira-blue-light rounded-lg\">\n                            <IconComponent className=\"h-5 w-5 text-jira-blue\" />\n                          </div>\n                          <CardTitle className=\"text-lg\">{resource.title}</CardTitle>\n                        </div>\n                        <CardDescription>{resource.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <Button variant=\"ghost\" className=\"p-0 h-auto text-jira-blue\">\n                          Explore <ExternalLink className=\"h-3 w-3 ml-1\" />\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div>\n              <h2 className=\"text-xl font-semibold text-jira-gray-900 mb-4\">Browse by Topic</h2>\n              <div className=\"space-y-6\">\n                {helpTopics.map((topic) => {\n                  const IconComponent = topic.icon;\n                  return (\n                    <Card key={topic.id}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3\">\n                          <IconComponent className=\"h-6 w-6 text-jira-blue\" />\n                          <CardTitle>{topic.category}</CardTitle>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          {topic.articles.map((article) => (\n                            <div\n                              key={article.title}\n                              className=\"p-4 border border-jira-gray-200 rounded-lg hover:border-jira-blue hover:bg-jira-blue-light/20 cursor-pointer transition-colors\"\n                              data-testid={`article-${article.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                            >\n                              <h4 className=\"font-medium text-jira-gray-900 mb-1\">\n                                {article.title}\n                              </h4>\n                              <p className=\"text-sm text-jira-gray-600\">\n                                {article.description}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            <Card className=\"mt-8 bg-jira-blue-light border-jira-blue\">\n              <CardHeader>\n                <CardTitle>Still need help?</CardTitle>\n                <CardDescription>\n                  Our support team is here to assist you\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex gap-3\">\n                  <Button data-testid=\"button-contact-support\">\n                    <MessageCircle className=\"h-4 w-4 mr-2\" />\n                    Contact Support\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-community\">\n                    Join Community\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Developer Section */}\n            <Card className=\"mt-8 border-orange-200 bg-orange-50\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <Settings className=\"h-6 w-6 text-orange-600\" />\n                  <CardTitle className=\"text-orange-800\">Developer Tools</CardTitle>\n                </div>\n                <CardDescription className=\"text-orange-700\">\n                  Tools for developers and testing\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-orange-800 mb-2\">Startup Overlay</h4>\n                    <p className=\"text-sm text-orange-700 mb-3\">\n                      Reset the startup overlay to see it again. This is useful for testing or if you want to see the welcome tour again.\n                    </p>\n                    <Button \n                      onClick={resetStartupOverlay}\n                      variant=\"outline\"\n                      className=\"border-orange-300 text-orange-700 hover:bg-orange-100\"\n                    >\n                      Reset Startup Overlay\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10143},"client/src/pages/Notifications.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { MessageSquare, GitPullRequest, CheckCircle, AlertCircle, X } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { mockUsers } from '@/data/mockData';\nimport { useState } from 'react';\n\ninterface Notification {\n  id: string;\n  type: 'comment' | 'pr' | 'issue' | 'complete' | 'assigned' | 'mention';\n  title: string;\n  message: string;\n  time: string;\n  read: boolean;\n  issueKey?: string;\n  icon: any;\n}\n\nconst mockNotifications: Notification[] = [\n  {\n    id: '1',\n    type: 'complete',\n    title: 'Google Cybersecurity Certificate Completed!',\n    message: 'Successfully completed the Google Cybersecurity Professional Certificate and received Credly badge',\n    time: '2 hours ago',\n    read: false,\n    issueKey: 'CYBER-1',\n    icon: CheckCircle,\n  },\n  {\n    id: '2',\n    type: 'complete',\n    title: 'OpenRTB Ad Banner Deployed',\n    message: 'Your JavaScript ad banner with impression tracking is now live on Hydro Online platform',\n    time: '5 hours ago',\n    read: false,\n    issueKey: 'HYDRO-1',\n    icon: CheckCircle,\n  },\n  {\n    id: '3',\n    type: 'issue',\n    title: 'Security Audit Completed',\n    message: 'Vulnerability assessment for Hydro Online platform completed. 3 medium-risk issues identified and resolved',\n    time: '1 day ago',\n    read: true,\n    issueKey: 'HYDRO-5',\n    icon: AlertCircle,\n  },\n  {\n    id: '4',\n    type: 'complete',\n    title: 'Blockchain Voting App Published',\n    message: 'Your Solidity smart contract voting system is now deployed on Sepolia ETH testnet',\n    time: '2 days ago',\n    read: true,\n    issueKey: 'VOTE-1',\n    icon: CheckCircle,\n  },\n  {\n    id: '5',\n    type: 'complete',\n    title: 'Portfolio Website Updated',\n    message: 'New design showcasing cybersecurity and development projects is now live at aryavhir.in',\n    time: '3 days ago',\n    read: true,\n    issueKey: 'PORT-1',\n    icon: CheckCircle,\n  },\n  {\n    id: '6',\n    type: 'complete',\n    title: 'TryHackMe Path Completed',\n    message: 'Successfully completed Cybersecurity 101 path with 100% completion rate',\n    time: '1 week ago',\n    read: true,\n    issueKey: 'CYBER-2',\n    icon: CheckCircle,\n  },\n  {\n    id: '7',\n    type: 'issue',\n    title: 'Advertisers Portal Beta Released',\n    message: 'Campaign management portal is now in beta testing with select advertisers',\n    time: '1 week ago',\n    read: true,\n    issueKey: 'HYDRO-2',\n    icon: AlertCircle,\n  },\n  {\n    id: '8',\n    type: 'complete',\n    title: '15+ Websites Deployed',\n    message: 'Milestone reached: Successfully deployed 15+ production-ready websites on Vercel',\n    time: '2 weeks ago',\n    read: true,\n    issueKey: 'PORT-2',\n    icon: CheckCircle,\n  },\n  {\n    id: '9',\n    type: 'complete',\n    title: 'Publisher Rewards System Live',\n    message: 'Automated compensation system for publishers is now processing payments',\n    time: '2 weeks ago',\n    read: true,\n    issueKey: 'HYDRO-3',\n    icon: CheckCircle,\n  },\n  {\n    id: '10',\n    type: 'issue',\n    title: 'MetaMask Integration Testing',\n    message: 'Web3 integration for crypto purchases is in final testing phase',\n    time: '3 weeks ago',\n    read: true,\n    issueKey: 'HYDRO-4',\n    icon: AlertCircle,\n  },\n];\n\nexport default function Notifications() {\n  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\n  const [activeTab, setActiveTab] = useState('all');\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev =>\n      prev.map(notif =>\n        notif.id === id ? { ...notif, read: true } : notif\n      )\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev =>\n      prev.map(notif => ({ ...notif, read: true }))\n    );\n  };\n\n  const deleteNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const filteredNotifications = activeTab === 'unread' \n    ? notifications.filter(n => !n.read)\n    : notifications;\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\" data-testid=\"text-notifications-title\">\n                    Notifications\n                  </h1>\n                  <p className=\"text-sm text-jira-gray-500 mt-1\">Stay updated with Aryavhir's latest achievements, project milestones, and career progress</p>\n                </div>\n                {unreadCount > 0 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={markAllAsRead}\n                    className=\"text-jira-blue hover:text-jira-blue-dark\"\n                    data-testid=\"button-mark-all-read\"\n                  >\n                    Mark all as read\n                  </Button>\n                )}\n              </div>\n              <p className=\"text-sm text-jira-gray-600\">\n                Stay updated with your team's activity and important project updates\n              </p>\n            </div>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"mb-4\" data-testid=\"tabs-notifications\">\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n                  All {notifications.length > 0 && `(${notifications.length})`}\n                </TabsTrigger>\n                <TabsTrigger value=\"unread\" data-testid=\"tab-unread\">\n                  Unread {unreadCount > 0 && `(${unreadCount})`}\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={activeTab} className=\"space-y-2\">\n                {filteredNotifications.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <CheckCircle className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\" data-testid=\"text-no-notifications\">\n                      {activeTab === 'unread' ? 'No unread notifications' : 'No notifications yet'}\n                    </p>\n                  </div>\n                ) : (\n                  filteredNotifications.map(notification => {\n                    const IconComponent = notification.icon;\n                    return (\n                      <div\n                        key={notification.id}\n                        className={`bg-white border border-jira-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow ${\n                          !notification.read ? 'bg-blue-50 border-blue-200' : ''\n                        }`}\n                        data-testid={`notification-${notification.id}`}\n                      >\n                        <div className=\"flex gap-4\">\n                          <IconComponent className=\"h-5 w-5 text-jira-gray-500 flex-shrink-0 mt-1\" />\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-start justify-between gap-2 mb-1\">\n                              <p className=\"text-sm font-medium text-jira-gray-900\">\n                                {notification.title}\n                              </p>\n                              <div className=\"flex items-center gap-2 flex-shrink-0\">\n                                {!notification.read && (\n                                  <div className=\"h-2 w-2 bg-blue-500 rounded-full\" />\n                                )}\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-6 w-6\"\n                                  onClick={() => deleteNotification(notification.id)}\n                                  data-testid={`button-delete-${notification.id}`}\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                            <p className=\"text-sm text-jira-gray-600 mb-2 line-clamp-2\">\n                              {notification.message}\n                            </p>\n                            <div className=\"flex items-center gap-3 text-xs text-jira-gray-500\">\n                              <span>{notification.time}</span>\n                              {notification.issueKey && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {notification.issueKey}\n                                </Badge>\n                              )}\n                              {!notification.read && (\n                                <button\n                                  onClick={() => markAsRead(notification.id)}\n                                  className=\"text-jira-blue hover:text-jira-blue-dark\"\n                                  data-testid={`button-mark-read-${notification.id}`}\n                                >\n                                  Mark as read\n                                </button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10047},"client/src/pages/ProjectSettings.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Settings, Users, Tag, Flag, Workflow, Archive, Trash2, Plus, X, Edit, AlertTriangle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { mockProjects, mockUsers } from '@/data/mockData';\nimport { useState } from 'react';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { useWorkflow } from '@/contexts/WorkflowContext';\n\nexport default function ProjectSettings() {\n  const project = mockProjects[0];\n  const [projectName, setProjectName] = useState(project.name);\n  const [projectDescription, setProjectDescription] = useState(project.description);\n  const [projectKey, setProjectKey] = useState(project.key);\n  \n  // Team management state\n  const [teamMembers, setTeamMembers] = useState(mockUsers);\n  const [showAddMember, setShowAddMember] = useState(false);\n  const [selectedUser, setSelectedUser] = useState('');\n  \n  // Labels management state\n  const [labels, setLabels] = useState(['backend', 'frontend', 'design', 'ux', 'database', 'security', 'api', 'performance']);\n  const [showCreateLabel, setShowCreateLabel] = useState(false);\n  const [showEditLabel, setShowEditLabel] = useState(false);\n  const [newLabelName, setNewLabelName] = useState('');\n  const [editingLabel, setEditingLabel] = useState('');\n  const [editedLabelName, setEditedLabelName] = useState('');\n  \n  // Workflow management state - using context\n  const { columns, addColumn } = useWorkflow();\n  const [showAddColumn, setShowAddColumn] = useState(false);\n  const [newColumnTitle, setNewColumnTitle] = useState('');\n  const [newColumnStatus, setNewColumnStatus] = useState('');\n  const [newColumnLimit, setNewColumnLimit] = useState('');\n  \n  // Delete warning state\n  const [showDeleteWarning, setShowDeleteWarning] = useState(false);\n\n  const handleAddMember = () => {\n    if (selectedUser) {\n      const user = mockUsers.find(u => u.id === selectedUser);\n      if (user && !teamMembers.find(m => m.id === user.id)) {\n        setTeamMembers([...teamMembers, user]);\n      }\n      setShowAddMember(false);\n      setSelectedUser('');\n    }\n  };\n\n  const handleRemoveMember = (userId: string) => {\n    setTeamMembers(teamMembers.filter(m => m.id !== userId));\n  };\n\n  const handleCreateLabel = () => {\n    if (newLabelName.trim() && !labels.includes(newLabelName.trim())) {\n      setLabels([...labels, newLabelName.trim()]);\n      setNewLabelName('');\n      setShowCreateLabel(false);\n    }\n  };\n\n  const handleEditLabel = () => {\n    if (editedLabelName.trim() && !labels.includes(editedLabelName.trim())) {\n      setLabels(labels.map(l => l === editingLabel ? editedLabelName.trim() : l));\n      setShowEditLabel(false);\n      setEditingLabel('');\n      setEditedLabelName('');\n    }\n  };\n\n  const handleDeleteLabel = (label: string) => {\n    setLabels(labels.filter(l => l !== label));\n  };\n\n  const handleAddColumn = () => {\n    if (newColumnTitle.trim() && newColumnStatus.trim()) {\n      const newColumn = {\n        id: (columns.length + 1).toString(),\n        title: newColumnTitle.toUpperCase(),\n        status: newColumnStatus as any,\n        issues: [],\n        limit: newColumnLimit ? parseInt(newColumnLimit) : undefined\n      };\n      addColumn(newColumn);\n      setShowAddColumn(false);\n      setNewColumnTitle('');\n      setNewColumnStatus('');\n      setNewColumnLimit('');\n    }\n  };\n\n  const availableUsers = mockUsers.filter(u => !teamMembers.find(m => m.id === u.id));\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-5xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Settings className=\"h-6 w-6 text-jira-gray-600\" />\n                <h1 className=\"text-2xl font-semibold text-jira-gray-900\" data-testid=\"text-settings-title\">\n                  Project Settings\n                </h1>\n              </div>\n              <p className=\"text-sm text-jira-gray-600\">\n                Configure your project settings, team members, and workflows\n              </p>\n            </div>\n\n            <Tabs defaultValue=\"details\" className=\"w-full\">\n              <TabsList className=\"mb-6\" data-testid=\"tabs-settings\">\n                <TabsTrigger value=\"details\" data-testid=\"tab-details\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Details\n                </TabsTrigger>\n                <TabsTrigger value=\"team\" data-testid=\"tab-team\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Team\n                </TabsTrigger>\n                <TabsTrigger value=\"labels\" data-testid=\"tab-labels\">\n                  <Tag className=\"h-4 w-4 mr-2\" />\n                  Labels\n                </TabsTrigger>\n                <TabsTrigger value=\"workflow\" data-testid=\"tab-workflow\">\n                  <Workflow className=\"h-4 w-4 mr-2\" />\n                  Workflow\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"details\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Project Information</CardTitle>\n                    <CardDescription>\n                      Update your project's basic information\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"project-name\">Project Name *</Label>\n                      <Input\n                        id=\"project-name\"\n                        value={projectName}\n                        onChange={(e) => setProjectName(e.target.value)}\n                        data-testid=\"input-project-name\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"project-key\">Project Key *</Label>\n                      <Input\n                        id=\"project-key\"\n                        value={projectKey}\n                        onChange={(e) => setProjectKey(e.target.value)}\n                        maxLength={10}\n                        data-testid=\"input-project-key\"\n                      />\n                      <p className=\"text-xs text-jira-gray-500\">\n                        This is used as a prefix for issue keys (e.g., PROJ-123)\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"project-description\">Description</Label>\n                      <Textarea\n                        id=\"project-description\"\n                        value={projectDescription}\n                        onChange={(e) => setProjectDescription(e.target.value)}\n                        rows={4}\n                        data-testid=\"textarea-project-description\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"project-category\">Category</Label>\n                      <Input\n                        id=\"project-category\"\n                        value={project.category}\n                        readOnly\n                        data-testid=\"input-project-category\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-red-600\">Danger Zone</CardTitle>\n                    <CardDescription>\n                      Irreversible actions for this project\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 border border-jira-gray-200 rounded-md\">\n                      <div>\n                        <p className=\"font-medium text-jira-gray-900\">Archive Project</p>\n                        <p className=\"text-sm text-jira-gray-600\">Archive this project and all its issues</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" data-testid=\"button-archive\">\n                        <Archive className=\"h-4 w-4 mr-2\" />\n                        Archive\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-3 border border-red-200 rounded-md\">\n                      <div>\n                        <p className=\"font-medium text-red-600\">Delete Project</p>\n                        <p className=\"text-sm text-jira-gray-600\">Permanently delete this project</p>\n                      </div>\n                      <Button \n                        variant=\"destructive\" \n                        size=\"sm\" \n                        data-testid=\"button-delete\"\n                        onClick={() => setShowDeleteWarning(true)}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"team\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle>Team Members</CardTitle>\n                        <CardDescription>\n                          Manage who has access to this project\n                        </CardDescription>\n                      </div>\n                      <Button onClick={() => setShowAddMember(true)} data-testid=\"button-add-member\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Member\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {teamMembers.map((user, index) => (\n                        <div key={user.id} className=\"flex items-center justify-between p-3 border border-jira-gray-200 rounded-md\">\n                          <div className=\"flex items-center gap-3\">\n                            <Avatar>\n                              <AvatarImage src={user.avatarUrl} alt={user.name} />\n                              <AvatarFallback className=\"bg-jira-blue text-white\">\n                                {user.initials}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium text-jira-gray-900\">{user.name}</p>\n                              <p className=\"text-sm text-jira-gray-600\">{user.email}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            {index === 0 && (\n                              <Badge variant=\"secondary\">Project Lead</Badge>\n                            )}\n                            {index !== 0 && (\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                onClick={() => handleRemoveMember(user.id)}\n                                data-testid={`button-remove-${user.id}`}\n                              >\n                                Remove\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"labels\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle>Issue Labels</CardTitle>\n                        <CardDescription>\n                          Create and manage labels for categorizing issues\n                        </CardDescription>\n                      </div>\n                      <Button onClick={() => setShowCreateLabel(true)} data-testid=\"button-create-label\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create Label\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {labels.map((label) => (\n                        <div key={label} className=\"flex items-center justify-between p-3 border border-jira-gray-200 rounded-md\">\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant=\"secondary\" className=\"text-sm\">{label}</Badge>\n                            <span className=\"text-sm text-jira-gray-600\">Used in 3 issues</span>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => {\n                                setEditingLabel(label);\n                                setEditedLabelName(label);\n                                setShowEditLabel(true);\n                              }}\n                              data-testid={`button-edit-${label}`}\n                            >\n                              <Edit className=\"h-4 w-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              onClick={() => handleDeleteLabel(label)}\n                              data-testid={`button-delete-${label}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-1 text-red-600\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"workflow\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Workflow Configuration</CardTitle>\n                    <CardDescription>\n                      Configure the workflow stages for your project\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {columns.map((column) => (\n                        <div key={column.id} className=\"p-4 border border-jira-gray-200 rounded-md\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <h4 className=\"font-medium text-jira-gray-900\">Column: {column.title}</h4>\n                            <Badge variant=\"secondary\">Status: {column.status}</Badge>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-jira-gray-600\">\n                              WIP Limit: {column.limit || 'None'}\n                            </span>\n                            <Button variant=\"ghost\" size=\"sm\">Configure</Button>\n                          </div>\n                        </div>\n                      ))}\n\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\" \n                        onClick={() => setShowAddColumn(true)}\n                        data-testid=\"button-add-column\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Column\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n\n      {/* Add Member Dialog */}\n      <Dialog open={showAddMember} onOpenChange={setShowAddMember}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Team Member</DialogTitle>\n            <DialogDescription>\n              Select a user to add to this project\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <Select value={selectedUser} onValueChange={setSelectedUser}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a user\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableUsers.map((user) => (\n                  <SelectItem key={user.id} value={user.id}>\n                    <div className=\"flex items-center gap-2\">\n                      <Avatar className=\"h-6 w-6\">\n                        <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                          {user.initials}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span>{user.name}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddMember(false)}>Cancel</Button>\n            <Button onClick={handleAddMember}>Add Member</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Label Dialog */}\n      <Dialog open={showCreateLabel} onOpenChange={setShowCreateLabel}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Label</DialogTitle>\n            <DialogDescription>\n              Enter a name for the new label\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"new-label\">Label Name</Label>\n              <Input\n                id=\"new-label\"\n                value={newLabelName}\n                onChange={(e) => setNewLabelName(e.target.value)}\n                placeholder=\"e.g., bug-fix, feature\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCreateLabel(false)}>Cancel</Button>\n            <Button onClick={handleCreateLabel}>Create</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Label Dialog */}\n      <Dialog open={showEditLabel} onOpenChange={setShowEditLabel}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Label</DialogTitle>\n            <DialogDescription>\n              Update the label name\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-label\">Label Name</Label>\n              <Input\n                id=\"edit-label\"\n                value={editedLabelName}\n                onChange={(e) => setEditedLabelName(e.target.value)}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowEditLabel(false)}>Cancel</Button>\n            <Button onClick={handleEditLabel}>Save</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Column Dialog */}\n      <Dialog open={showAddColumn} onOpenChange={setShowAddColumn}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Workflow Column</DialogTitle>\n            <DialogDescription>\n              Create a new column for your workflow\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"column-title\">Column Title</Label>\n              <Input\n                id=\"column-title\"\n                value={newColumnTitle}\n                onChange={(e) => setNewColumnTitle(e.target.value)}\n                placeholder=\"e.g., In Review\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"column-status\">Status Value</Label>\n              <Input\n                id=\"column-status\"\n                value={newColumnStatus}\n                onChange={(e) => setNewColumnStatus(e.target.value)}\n                placeholder=\"e.g., in-review\"\n              />\n              <p className=\"text-xs text-jira-gray-500\">\n                Use lowercase with hyphens (e.g., in-review, ready-to-deploy)\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"column-limit\">WIP Limit (optional)</Label>\n              <Input\n                id=\"column-limit\"\n                type=\"number\"\n                value={newColumnLimit}\n                onChange={(e) => setNewColumnLimit(e.target.value)}\n                placeholder=\"e.g., 5\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowAddColumn(false)}>Cancel</Button>\n            <Button onClick={handleAddColumn}>Add Column</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Warning Dialog */}\n      <AlertDialog open={showDeleteWarning} onOpenChange={setShowDeleteWarning}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-12 w-18 rounded-full bg-red-100 flex items-center justify-center\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <div>\n                <AlertDialogTitle>Please Don't Do That!</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Deleting this project would remove all issues, comments, and history. This action cannot be undone. Are you absolutely sure you want to proceed?\n                </AlertDialogDescription>\n              </div>\n            </div>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>I Changed My Mind</AlertDialogCancel>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":23822},"client/src/pages/Projects.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Folder, Plus, Star, Clock, Users, ExternalLink } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { mockProjects, mockIssues, mockUsers } from '@/data/mockData';\nimport { Link } from 'wouter';\n\nexport default function Projects() {\n  const recentProjects = mockProjects;\n  const starredProjects = mockProjects.slice(0, 1);\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h1 className=\"text-2xl font-semibold text-jira-gray-900\" data-testid=\"text-projects-title\">\n                  Projects\n                </h1>\n                <Button data-testid=\"button-create-project\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Project\n                </Button>\n              </div>\n              <p className=\"text-sm text-jira-gray-600\">\n                Browse and manage all your projects\n              </p>\n            </div>\n\n            <Tabs defaultValue=\"recent\" className=\"w-full\">\n              <TabsList className=\"mb-6\" data-testid=\"tabs-projects\">\n                <TabsTrigger value=\"recent\" data-testid=\"tab-recent\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Recent\n                </TabsTrigger>\n                <TabsTrigger value=\"starred\" data-testid=\"tab-starred\">\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Current\n                </TabsTrigger>\n                <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n                  <Folder className=\"h-4 w-4 mr-2\" />\n                  All Projects\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"recent\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {recentProjects.map(project => {\n                    const projectIssues = mockIssues.filter(issue => issue.project.id === project.id);\n                    const activeIssues = projectIssues.filter(issue => issue.status !== 'done').length;\n                    \n                    return (\n                      <Card key={project.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <Avatar className=\"w-10 h-10\">\n                                <AvatarImage src={project.avatarUrl || '/assets/jira-logo.jpg'} alt={project.name} />\n                                <AvatarFallback className=\"bg-jira-blue text-white font-bold text-sm\">\n                                  {project.key}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n                                <CardDescription className=\"text-xs\">\n                                  {project.category} • {project.type}\n                                </CardDescription>\n                              </div>\n                            </div>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                              <Star className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-sm text-jira-gray-600 mb-4 line-clamp-2\">\n                            {project.description}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium text-jira-gray-900\">{activeIssues}</span>\n                                <span className=\"text-jira-gray-600 ml-1\">Active</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium text-jira-gray-900\">{projectIssues.length}</span>\n                                <span className=\"text-jira-gray-600 ml-1\">Total</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarImage src={project.lead.avatarUrl} alt={project.lead.name} />\n                                <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                                  {project.lead.initials}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-jira-gray-600\">{project.lead.name}</span>\n                            </div>\n                            <a href={project.ProjectUrl || '/board'} target={project.ProjectUrl ? '_blank' : '_self'} rel=\"noopener noreferrer\">\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${project.key}`}>\n                                {project.ProjectUrl && <ExternalLink className=\"h-4 w-4 mr-1\" />}\n                                {project.ProjectUrl ? 'View Project' : 'View Board'}\n                              </Button>\n                            </a>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"starred\" className=\"space-y-4\">\n                {starredProjects.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Star className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No starred projects yet</p>\n                    <p className=\"text-sm text-jira-gray-500 mt-2\">\n                      Star projects to quickly find them here\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {starredProjects.map(project => {\n                      const projectIssues = mockIssues.filter(issue => issue.project.id === project.id);\n                      const activeIssues = projectIssues.filter(issue => issue.status !== 'done').length;\n                      \n                      return (\n                        <Card key={project.id} className=\"hover:shadow-md transition-shadow\">\n                          <CardHeader>\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-center gap-3\">\n                                <Avatar className=\"w-10 h-10\">\n                                  <AvatarImage src={project.avatarUrl || '/assets/jira-logo.jpg'} alt={project.name} />\n                                  <AvatarFallback className=\"bg-jira-blue text-white font-bold text-sm\">\n                                    {project.key}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n                                  <CardDescription className=\"text-xs\">\n                                    {project.category} • {project.type}\n                                  </CardDescription>\n                                </div>\n                              </div>\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                                <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                              </Button>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <p className=\"text-sm text-jira-gray-600 mb-4 line-clamp-2\">\n                              {project.description}\n                            </p>\n                            \n                            <div className=\"flex items-center justify-between mb-4\">\n                              <div className=\"flex items-center gap-4 text-sm\">\n                                <div>\n                                  <span className=\"font-medium text-jira-gray-900\">{activeIssues}</span>\n                                  <span className=\"text-jira-gray-600 ml-1\">Active</span>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium text-jira-gray-900\">{projectIssues.length}</span>\n                                  <span className=\"text-jira-gray-600 ml-1\">Total</span>\n                                </div>\n                              </div>\n                            </div>\n\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <Avatar className=\"h-6 w-6\">\n                                  <AvatarImage src={project.lead.avatarUrl} alt={project.lead.name} />\n                                  <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                                    {project.lead.initials}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"text-xs text-jira-gray-600\">{project.lead.name}</span>\n                              </div>\n                              <a href={project.ProjectUrl || '/board'} target={project.ProjectUrl ? '_blank' : '_self'} rel=\"noopener noreferrer\">\n                                <Button variant=\"outline\" size=\"sm\">\n                                  {project.ProjectUrl && <ExternalLink className=\"h-4 w-4 mr-1\" />}\n                                  {project.ProjectUrl ? 'View Project' : 'View Board'}\n                                </Button>\n                              </a>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"all\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {mockProjects.map(project => {\n                    const projectIssues = mockIssues.filter(issue => issue.project.id === project.id);\n                    const activeIssues = projectIssues.filter(issue => issue.status !== 'done').length;\n                    \n                    return (\n                      <Card key={project.id} className=\"hover:shadow-md transition-shadow\">\n                        <CardHeader>\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <Avatar className=\"w-10 h-10\">\n                                <AvatarImage src={project.avatarUrl || '/assets/jira-logo.jpg'} alt={project.name} />\n                                <AvatarFallback className=\"bg-jira-blue text-white font-bold text-sm\">\n                                  {project.key}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n                                <CardDescription className=\"text-xs\">\n                                  {project.category} • {project.type}\n                                </CardDescription>\n                              </div>\n                            </div>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                              <Star className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-sm text-jira-gray-600 mb-4 line-clamp-2\">\n                            {project.description}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium text-jira-gray-900\">{activeIssues}</span>\n                                <span className=\"text-jira-gray-600 ml-1\">Active</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium text-jira-gray-900\">{projectIssues.length}</span>\n                                <span className=\"text-jira-gray-600 ml-1\">Total</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarImage src={project.lead.avatarUrl} alt={project.lead.name} />\n                                <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                                  {project.lead.initials}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-jira-gray-600\">{project.lead.name}</span>\n                            </div>\n                            <a href={project.ProjectUrl || '/board'} target={project.ProjectUrl ? '_blank' : '_self'} rel=\"noopener noreferrer\">\n                              <Button variant=\"outline\" size=\"sm\">\n                                {project.ProjectUrl && <ExternalLink className=\"h-4 w-4 mr-1\" />}\n                                {project.ProjectUrl ? 'View Project' : 'View Board'}\n                              </Button>\n                            </a>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15559},"client/src/pages/Releases.tsx":{"content":"import { useState } from 'react';\nimport JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Plus, Calendar, Package, CheckCircle, AlertCircle, Clock, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { mockProjects, mockUsers } from '@/data/mockData';\nimport { Progress } from '@/components/ui/progress';\n\ninterface Release {\n  id: string;\n  version: string;\n  name: string;\n  status: 'planned' | 'in-progress' | 'released';\n  releaseDate: string;\n  description: string;\n  manager: typeof mockUsers[0];\n  issues: {\n    total: number;\n    completed: number;\n    inProgress: number;\n    todo: number;\n  };\n  progress: number;\n}\n\nconst initialReleases: Release[] = [\n  {\n    id: '1',\n    version: 'v1.0.0',\n    name: 'Jira Clone UI Initial Release',\n    status: 'released',\n    releaseDate: '2024-08-15',\n    description: 'Jira to keep track of my career and personal progress',\n    manager: mockUsers[0],\n    issues: {\n      total: 12,\n      completed: 12,\n      inProgress: 0,\n      todo: 0,\n    },\n    progress: 100,\n  },\n {\n    id: '2',\n    version: 'v2.1.0',\n    name: 'Portfolio Website Redesign',\n    status: 'in-progress',\n    releaseDate: '2024-09-05',\n    description: 'Complete redesign of personal portfolio with minimalist aesthetic using React,threejs and vite',\n    manager: mockUsers[0],\n    issues: {\n      total: 7,\n      completed: 7,\n      inProgress: 0,\n      todo: 0,\n    },\n    progress: 100,\n  },\n  {\n    id: '3',\n    version: 'v1.1.0',\n    name: 'Jira Clone UI Initial Release',\n    status: 'planned',\n    releaseDate: '2025-11-01',\n    description: 'Integrate backend to connect to a database and enable live updates',\n    manager: mockUsers[0],\n    issues: {\n      total: 12,\n      completed: 0,\n      inProgress: 1,\n      todo: 11,\n    },\n    progress: 0,\n  },\n \n   {\n    id: '4',\n    version: 'v4.0.0',\n    name: 'AI Studio - Image theme conversion',\n    status: 'planned',\n    releaseDate: '2024-12-15',\n    description: 'AI-powered tool for converting your image to a desired theme or setting',\n    manager: mockUsers[0],\n    issues: {\n      total: 25,\n      completed: 23,\n      inProgress: 2,\n      todo: 0,\n    },\n    progress: 92,\n  },\n  {\n    id: '5',\n    version: 'v1.0.0',\n    name: 'Google Cybersecurity Certificate Portfolio',\n    status: 'released',\n    releaseDate: '2024-07-30',\n    description: 'Portfolio of security audit projects, compliance assessments, and incident response simulations',\n    manager: mockUsers[0],\n    issues: {\n      total: 5,\n      completed: 5,\n      inProgress: 0,\n      todo: 0,\n    },\n    progress: 100,\n  },\n \n   {\n    id: '6',\n    version: 'v1.2.0',\n    name: 'Video to figma to code Project ',\n    status: 'released',\n    releaseDate: '2025-08-15',\n    description: 'Interview project to covert a video to an actual figma design and then to code using react ',\n    manager: mockUsers[0],\n    issues: {\n      total: 12,\n      completed: 12,\n      inProgress: 0,\n      todo: 0,\n    },\n    progress: 100,\n  },\n   {\n    id: '7',\n    version: 'v3.0.0',\n    name: 'Blockchain based voting app',\n    status: 'in-progress',\n    releaseDate: '2024-03-30',\n    description: 'College project for implementing a secure voting system on sepolia ETH testnet using Solidity smart contracts and React frontend',\n    manager: mockUsers[0],\n    issues: {\n      total: 18,\n      completed: 10,\n      inProgress: 6,\n      todo: 2,\n    },\n    progress: 56,\n  },\n];\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case 'released':\n      return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n    case 'in-progress':\n      return <Clock className=\"h-5 w-5 text-blue-500\" />;\n    case 'planned':\n      return <AlertCircle className=\"h-5 w-5 text-jira-gray-400\" />;\n    default:\n      return <Package className=\"h-5 w-5 text-jira-gray-400\" />;\n  }\n};\n\nconst getStatusBadge = (status: string) => {\n  switch (status) {\n    case 'released':\n      return <Badge className=\"bg-green-100 text-green-700 border-green-200\">Released</Badge>;\n    case 'in-progress':\n      return <Badge className=\"bg-blue-100 text-blue-700 border-blue-200\">In Progress</Badge>;\n    case 'planned':\n      return <Badge variant=\"outline\" className=\"text-jira-gray-600\">Planned</Badge>;\n    default:\n      return <Badge variant=\"outline\">{status}</Badge>;\n  }\n};\n\nexport default function Releases() {\n  const currentProject = mockProjects[0];\n  const [releases, setReleases] = useState<Release[]>(initialReleases);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [selectedRelease, setSelectedRelease] = useState<Release | null>(null);\n  \n  const [newRelease, setNewRelease] = useState({\n    version: '',\n    name: '',\n    description: '',\n    releaseDate: '',\n    managerId: '',\n    status: 'planned' as const\n  });\n\n  const handleCreateRelease = () => {\n    const manager = mockUsers.find(u => u.id === newRelease.managerId) || mockUsers[0];\n    \n    const release: Release = {\n      id: Date.now().toString(),\n      version: newRelease.version,\n      name: newRelease.name,\n      description: newRelease.description,\n      releaseDate: newRelease.releaseDate,\n      status: newRelease.status,\n      manager: manager,\n      issues: {\n        total: 0,\n        completed: 0,\n        inProgress: 0,\n        todo: 0,\n      },\n      progress: 0,\n    };\n\n    setReleases([release, ...releases]);\n    setShowCreateDialog(false);\n    setNewRelease({\n      version: '',\n      name: '',\n      description: '',\n      releaseDate: '',\n      managerId: '',\n      status: 'planned'\n    });\n  };\n\n  const handleViewDetails = (release: Release) => {\n    setSelectedRelease(release);\n    setShowDetailsDialog(true);\n  };\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 flex flex-col overflow-auto\">\n          <div className=\"border-b border-jira-gray-200 bg-white sticky top-0 z-10\">\n            <div className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\">Releases</h1>\n                  <p className=\"text-sm text-jira-gray-500 mt-1\">{currentProject.name}</p>\n                </div>\n                <Button \n                  className=\"bg-jira-blue hover:bg-jira-blue-dark text-white\"\n                  onClick={() => setShowCreateDialog(true)}\n                  data-testid=\"button-create-release\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create release\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-1 px-6 py-6\">\n            <div className=\"grid gap-6\">\n              {releases.map(release => (\n                <div key={release.id} className=\"bg-white border border-jira-gray-200 rounded-lg hover:border-jira-blue transition-colors\">\n                  <div className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-start gap-3 flex-1\">\n                        {getStatusIcon(release.status)}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-1\">\n                            <h3 className=\"text-lg font-semibold text-jira-gray-900\">{release.version}</h3>\n                            {getStatusBadge(release.status)}\n                          </div>\n                          <p className=\"text-base text-jira-gray-900 mb-2\">{release.name}</p>\n                          <p className=\"text-sm text-jira-gray-500\">{release.description}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 gap-4 mb-4 pt-4 border-t border-jira-gray-200\">\n                      <div>\n                        <p className=\"text-xs text-jira-gray-500 mb-1\">Release Date</p>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-jira-gray-400\" />\n                          <span className=\"text-sm text-jira-gray-900\">{new Date(release.releaseDate).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-jira-gray-500 mb-1\">Release Manager</p>\n                        <div className=\"flex items-center gap-2\">\n                          <Avatar className=\"h-5 w-5\">\n                            <AvatarImage src={release.manager.avatarUrl} />\n                            <AvatarFallback className=\"text-xs bg-jira-blue text-white\">{release.manager.initials}</AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm text-jira-gray-900\">{release.manager.name}</span>\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-jira-gray-500 mb-1\">Issues</p>\n                        <div className=\"text-sm text-jira-gray-900\">\n                          {release.issues.completed}/{release.issues.total} completed\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-jira-gray-500 mb-1\">Progress</p>\n                        <div className=\"text-sm text-jira-gray-900\">{release.progress}%</div>\n                      </div>\n                    </div>\n\n                    <div className=\"mb-3\">\n                      <Progress value={release.progress} className=\"h-2\" />\n                    </div>\n\n                    <div className=\"flex items-center gap-6 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-jira-gray-700\">{release.issues.completed} Done</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-3 w-3 bg-blue-500 rounded-full\"></div>\n                        <span className=\"text-jira-gray-700\">{release.issues.inProgress} In Progress</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-3 w-3 bg-jira-gray-300 rounded-full\"></div>\n                        <span className=\"text-jira-gray-700\">{release.issues.todo} To Do</span>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 mt-4 pt-4 border-t border-jira-gray-200\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => handleViewDetails(release)}\n                        data-testid={`button-view-details-${release.id}`}\n                      >\n                        View details\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Release Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create Release</DialogTitle>\n            <DialogDescription>\n              Create a new release for your project\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"version\">Version *</Label>\n                <Input\n                  id=\"version\"\n                  placeholder=\"e.g., v1.0.0\"\n                  value={newRelease.version}\n                  onChange={(e) => setNewRelease({ ...newRelease, version: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"release-date\">Release Date *</Label>\n                <Input\n                  id=\"release-date\"\n                  type=\"date\"\n                  value={newRelease.releaseDate}\n                  onChange={(e) => setNewRelease({ ...newRelease, releaseDate: e.target.value })}\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Release Name *</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"e.g., Major Feature Release\"\n                value={newRelease.name}\n                onChange={(e) => setNewRelease({ ...newRelease, name: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Describe this release...\"\n                rows={3}\n                value={newRelease.description}\n                onChange={(e) => setNewRelease({ ...newRelease, description: e.target.value })}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\">Status</Label>\n                <Select \n                  value={newRelease.status} \n                  onValueChange={(value: any) => setNewRelease({ ...newRelease, status: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"planned\">Planned</SelectItem>\n                    <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                    <SelectItem value=\"released\">Released</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"manager\">Release Manager</Label>\n                <Select \n                  value={newRelease.managerId} \n                  onValueChange={(value) => setNewRelease({ ...newRelease, managerId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select manager\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {mockUsers.map((user) => (\n                      <SelectItem key={user.id} value={user.id}>\n                        {user.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>Cancel</Button>\n            <Button onClick={handleCreateRelease}>Create Release</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Details Dialog */}\n      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-3\">\n              {selectedRelease && getStatusIcon(selectedRelease.status)}\n              <span>{selectedRelease?.version} - {selectedRelease?.name}</span>\n            </DialogTitle>\n          </DialogHeader>\n          {selectedRelease && (\n            <div className=\"space-y-6 py-4\">\n              <div>\n                {getStatusBadge(selectedRelease.status)}\n              </div>\n              \n              <div>\n                <h4 className=\"text-sm font-medium text-jira-gray-900 mb-2\">Description</h4>\n                <p className=\"text-sm text-jira-gray-700\">{selectedRelease.description}</p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"text-sm font-medium text-jira-gray-900 mb-2\">Release Date</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4 text-jira-gray-400\" />\n                    <span className=\"text-sm text-jira-gray-700\">\n                      {new Date(selectedRelease.releaseDate).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'long', \n                        day: 'numeric' \n                      })}\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"text-sm font-medium text-jira-gray-900 mb-2\">Release Manager</h4>\n                  <div className=\"flex items-center gap-2\">\n                    <Avatar className=\"h-6 w-6\">\n                      <AvatarImage src={selectedRelease.manager.avatarUrl} />\n                      <AvatarFallback className=\"text-xs bg-jira-blue text-white\">\n                        {selectedRelease.manager.initials}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm text-jira-gray-700\">{selectedRelease.manager.name}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-sm font-medium text-jira-gray-900 mb-3\">Progress</h4>\n                <Progress value={selectedRelease.progress} className=\"h-3 mb-3\" />\n                <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-jira-gray-500\">Total Issues</p>\n                    <p className=\"text-xl font-semibold text-jira-gray-900\">{selectedRelease.issues.total}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-jira-gray-500\">Completed</p>\n                    <p className=\"text-xl font-semibold text-green-600\">{selectedRelease.issues.completed}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-jira-gray-500\">In Progress</p>\n                    <p className=\"text-xl font-semibold text-blue-600\">{selectedRelease.issues.inProgress}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-jira-gray-500\">To Do</p>\n                    <p className=\"text-xl font-semibold text-jira-gray-600\">{selectedRelease.issues.todo}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDetailsDialog(false)}>Close</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19590},"client/src/pages/Roadmap.tsx":{"content":"import { useState } from 'react';\nimport JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Plus, Calendar, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { mockProjects, mockIssues } from '@/data/mockData';\n\ninterface Epic {\n  id: string;\n  key: string;\n  summary: string;\n  startDate: string;\n  endDate: string;\n  progress: number;\n  status: string;\n  issues: any[];\n}\n\nconst quarters2024 = [\n  { id: 'Q1-2024', label: 'Q1 2024', months: ['Jan', 'Feb', 'Mar'], year: 2024 },\n  { id: 'Q2-2024', label: 'Q2 2024', months: ['Apr', 'May', 'Jun'], year: 2024 },\n  { id: 'Q3-2024', label: 'Q3 2024', months: ['Jul', 'Aug', 'Sep'], year: 2024 },\n  { id: 'Q4-2024', label: 'Q4 2024', months: ['Oct', 'Nov', 'Dec'], year: 2024 },\n];\n\nconst quarters2025 = [\n  { id: 'Q1-2025', label: 'Q1 2025', months: ['Jan', 'Feb', 'Mar'], year: 2025 },\n  { id: 'Q2-2025', label: 'Q2 2025', months: ['Apr', 'May', 'Jun'], year: 2025 },\n  { id: 'Q3-2025', label: 'Q3 2025', months: ['Jul', 'Aug', 'Sep'], year: 2025 },\n  { id: 'Q4-2025', label: 'Q4 2025', months: ['Oct', 'Nov', 'Dec'], year: 2025 },\n];\n\nconst quarters2026 = [\n  { id: 'Q1-2026', label: 'Q1 2026', months: ['Jan', 'Feb', 'Mar'], year: 2026 },\n  { id: 'Q2-2026', label: 'Q2 2026', months: ['Apr', 'May', 'Jun'], year: 2026 },\n  { id: 'Q3-2026', label: 'Q3 2026', months: ['Jul', 'Aug', 'Sep'], year: 2026 },\n  { id: 'Q4-2026', label: 'Q4 2026', months: ['Oct', 'Nov', 'Dec'], year: 2026 },\n];\n\nconst initialEpics: Epic[] = [\n  {\n    id: '1',\n    key: 'Q2-2024',\n    summary: 'Completed Bachelor\\'s in Information Technology',\n    startDate: '2024-04-01',\n    endDate: '2024-06-30',\n    progress: 100,\n    status: 'completed',\n    issues: [],\n  },\n  {\n    id: '2',\n    key: 'Q3-2024',\n    summary: 'Joined Hydro Online as Full Stack Developer',\n    startDate: '2024-07-01',\n    endDate: '2024-09-30',\n    progress: 100,\n    status: 'completed',\n    issues: [],\n  },\n  {\n    id: '3',\n    key: 'Q4-2024',\n    summary: 'OpenRTB JS Development',\n    startDate: '2024-10-01',\n    endDate: '2024-12-31',\n    progress: 85,\n    status: 'in-progress',\n    issues: [],\n  },\n  {\n    id: '4',\n    key: 'Q1-2025',\n    summary: 'Hydro Online Main Site & Payment Infrastructure',\n    startDate: '2025-01-01',\n    endDate: '2025-03-31',\n    progress: 0,\n    status: 'planned',\n    issues: [],\n  },\n  {\n    id: '5',\n    key: 'Q2-2025',\n    summary: 'Decentralized File Transfer System',\n    startDate: '2025-04-01',\n    endDate: '2025-06-30',\n    progress: 0,\n    status: 'planned',\n    issues: [],\n  },\n  {\n    id: '6',\n    key: 'Q3-2025',\n    summary: 'Active Interviewing & Career Opportunities',\n    startDate: '2025-07-01',\n    endDate: '2025-09-30',\n    progress: 0,\n    status: 'planned',\n    issues: [],\n  },\n  {\n    id: '7',\n    key: 'Q1-2026',\n    summary: 'Jr. Penetration Tester Certification',\n    startDate: '2026-01-01',\n    endDate: '2026-03-31',\n    progress: 0,\n    status: 'planned',\n    issues: [],\n  },\n];\n\nexport default function Roadmap() {\n  const currentProject = mockProjects[0];\n  const [selectedYear, setSelectedYear] = useState(2025);\n  const [epics, setEpics] = useState<Epic[]>(initialEpics);\n  const [showCreateEpic, setShowCreateEpic] = useState(false);\n  const [newEpic, setNewEpic] = useState({\n    summary: '',\n    description: '',\n    startDate: '',\n    endDate: ''\n  });\n\n  const getQuarters = (year: number) => {\n    switch(year) {\n      case 2024: return quarters2024;\n      case 2025: return quarters2025;\n      case 2026: return quarters2026;\n      default: return quarters2024;\n    }\n  };\n\n  const quarters = getQuarters(selectedYear);\n\n  const getEpicPosition = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const yearStart = new Date(`${selectedYear}-01-01`);\n    \n    const startMonth = (start.getFullYear() - selectedYear) * 12 + start.getMonth();\n    const endMonth = (end.getFullYear() - selectedYear) * 12 + end.getMonth();\n    const duration = endMonth - startMonth + 1;\n    \n    return {\n      gridColumn: `${startMonth + 1} / span ${Math.max(1, duration)}`,\n    };\n  };\n\n  const handlePreviousYear = () => {\n    if (selectedYear > 2024) {\n      setSelectedYear(selectedYear - 1);\n    }\n  };\n\n  const handleNextYear = () => {\n    if (selectedYear < 2026) {\n      setSelectedYear(selectedYear + 1);\n    }\n  };\n\n  const handleCreateEpic = () => {\n    const epic: Epic = {\n      id: Date.now().toString(),\n      key: `${currentProject.key}-${100 + epics.length}`,\n      summary: newEpic.summary,\n      startDate: newEpic.startDate,\n      endDate: newEpic.endDate,\n      progress: 0,\n      status: 'planned',\n      issues: []\n    };\n\n    setEpics([...epics, epic]);\n    setShowCreateEpic(false);\n    setNewEpic({ summary: '', description: '', startDate: '', endDate: '' });\n  };\n\n  const filteredEpics = epics.filter(epic => {\n    const epicYear = new Date(epic.startDate).getFullYear();\n    return epicYear === selectedYear;\n  });\n\n  return (\n    <div className=\"h-screen bg-white flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 flex flex-col overflow-auto\">\n          <div className=\"border-b border-jira-gray-200 bg-white sticky top-0 z-10\">\n            <div className=\"px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\">Career Roadmap</h1>\n                  <p className=\"text-sm text-jira-gray-500 mt-1\">My career journey from graduation to current role at Hydro Online and future plans</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    {selectedYear}\n                  </Button>\n                  <Button \n                    className=\"bg-jira-blue hover:bg-jira-blue-dark text-white\"\n                    onClick={() => setShowCreateEpic(true)}\n                    data-testid=\"button-create-epic\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create epic\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex-1 px-6 py-6 overflow-auto\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-4\">\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"h-8 w-8\"\n                    onClick={handlePreviousYear}\n                    disabled={selectedYear <= 2024}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <h2 className=\"text-lg font-medium text-jira-gray-900\">{selectedYear}</h2>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"h-8 w-8\"\n                    onClick={handleNextYear}\n                    disabled={selectedYear >= 2026}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <div className=\"grid grid-cols-12 gap-0 border-t border-l border-jira-gray-200\">\n                  {quarters.map(quarter => (\n                    <div key={quarter.id} className=\"col-span-3 border-r border-jira-gray-200\">\n                      <div className=\"bg-jira-gray-50 border-b border-jira-gray-200 p-2 text-center\">\n                        <span className=\"text-sm font-medium text-jira-gray-700\">{quarter.label}</span>\n                      </div>\n                      <div className=\"grid grid-cols-3\">\n                        {quarter.months.map(month => (\n                          <div key={month} className=\"border-r border-b border-jira-gray-200 p-2 text-center last:border-r-0\">\n                            <span className=\"text-xs text-jira-gray-500\">{month}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 space-y-4\">\n                  {filteredEpics.map(epic => (\n                    <div key={epic.id} className=\"relative\">\n                      <div className=\"grid grid-cols-12 gap-0 relative h-20\">\n                        <div \n                          className=\"absolute h-16 bg-jira-blue rounded-lg p-3 cursor-pointer hover:bg-jira-blue-dark transition-colors z-10\"\n                          style={getEpicPosition(epic.startDate, epic.endDate)}\n                        >\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-xs font-medium text-white\">{epic.key}</span>\n                              <Badge variant=\"outline\" className=\"bg-white/20 text-white border-white/40 text-xs\">\n                                {epic.issues.length} issues\n                              </Badge>\n                            </div>\n                            <span className=\"text-xs text-white\">{epic.progress}%</span>\n                          </div>\n                          <p className=\"text-sm font-medium text-white truncate\">{epic.summary}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-8 border-t border-jira-gray-200 pt-6\">\n              <h3 className=\"text-lg font-medium text-jira-gray-900 mb-4\">Timeline Legend</h3>\n              <div className=\"flex items-center gap-6\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-12 bg-jira-blue rounded\"></div>\n                  <span className=\"text-sm text-jira-gray-700\">In Progress</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-12 bg-jira-gray-300 rounded\"></div>\n                  <span className=\"text-sm text-jira-gray-700\">Planned</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-12 bg-green-500 rounded\"></div>\n                  <span className=\"text-sm text-jira-gray-700\">Completed</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Create Epic Dialog */}\n      <Dialog open={showCreateEpic} onOpenChange={setShowCreateEpic}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create Epic</DialogTitle>\n            <DialogDescription>\n              Create a new epic for your roadmap\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"epic-summary\">Epic Summary *</Label>\n              <Input\n                id=\"epic-summary\"\n                placeholder=\"e.g., Payment Integration\"\n                value={newEpic.summary}\n                onChange={(e) => setNewEpic({ ...newEpic, summary: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"epic-description\">Description</Label>\n              <Textarea\n                id=\"epic-description\"\n                placeholder=\"Describe the epic...\"\n                rows={3}\n                value={newEpic.description}\n                onChange={(e) => setNewEpic({ ...newEpic, description: e.target.value })}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start-date\">Start Date *</Label>\n                <Input\n                  id=\"start-date\"\n                  type=\"date\"\n                  value={newEpic.startDate}\n                  onChange={(e) => setNewEpic({ ...newEpic, startDate: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end-date\">End Date *</Label>\n                <Input\n                  id=\"end-date\"\n                  type=\"date\"\n                  value={newEpic.endDate}\n                  onChange={(e) => setNewEpic({ ...newEpic, endDate: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCreateEpic(false)}>Cancel</Button>\n            <Button onClick={handleCreateEpic}>Create Epic</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13574},"client/src/pages/Teams.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Users, Plus, Mail, Shield } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { mockUsers } from '@/data/mockData';\n\ninterface Team {\n  id: string;\n  name: string;\n  description: string;\n  memberCount: number;\n  projectCount: number;\n  members: typeof mockUsers;\n}\n\nconst mockTeams: Team[] = [\n  {\n    id: '1',\n    name: 'Development Team',\n    description: 'Core development and engineering team',\n    memberCount: 5,\n    projectCount: 3,\n    members: mockUsers.slice(0, 3),\n  },\n  {\n    id: '2',\n    name: 'Design Team',\n    description: 'UX/UI design and user research',\n    memberCount: 3,\n    projectCount: 2,\n    members: mockUsers.slice(2, 4),\n  },\n  {\n    id: '3',\n    name: 'Product Team',\n    description: 'Product management and strategy',\n    memberCount: 2,\n    projectCount: 4,\n    members: mockUsers.slice(0, 2),\n  },\n];\n\nexport default function Teams() {\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center gap-3\">\n                  <Users className=\"h-6 w-6 text-jira-blue\" />\n                  <h1 className=\"text-2xl font-semibold text-jira-gray-900\" data-testid=\"text-teams-title\">\n                    Teams\n                  </h1>\n                </div>\n                <Button data-testid=\"button-create-team\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Team\n                </Button>\n              </div>\n              <p className=\"text-sm text-jira-gray-600\">\n                Manage your teams and collaborate effectively\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {mockTeams.map(team => (\n                <Card key={team.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div>\n                        <CardTitle className=\"text-xl mb-1\">{team.name}</CardTitle>\n                        <CardDescription>{team.description}</CardDescription>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {team.memberCount} members\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-jira-gray-600\">Active Projects</span>\n                        <span className=\"font-medium text-jira-gray-900\">{team.projectCount}</span>\n                      </div>\n\n                      <div>\n                        <h4 className=\"text-sm font-medium text-jira-gray-700 mb-3\">Team Members</h4>\n                        <div className=\"space-y-2\">\n                          {team.members.map((member, index) => (\n                            <div key={member.id} className=\"flex items-center justify-between p-2 hover:bg-jira-gray-50 rounded\">\n                              <div className=\"flex items-center gap-2\">\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarImage src={member.avatarUrl} alt={member.name} />\n                                  <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n                                    {member.initials}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <p className=\"text-sm font-medium text-jira-gray-900\">{member.name}</p>\n                                  <p className=\"text-xs text-jira-gray-600\">{member.email}</p>\n                                </div>\n                              </div>\n                              {index === 0 && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  <Shield className=\"h-3 w-3 mr-1\" />\n                                  Lead\n                                </Badge>\n                              )}\n                            </div>\n                          ))}\n                          {team.memberCount > team.members.length && (\n                            <div className=\"flex items-center gap-2 p-2 text-sm text-jira-gray-600\">\n                              <span>+{team.memberCount - team.members.length} more members</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 pt-2\">\n                        <Button variant=\"outline\" className=\"flex-1\" data-testid={`button-view-${team.id}`}>\n                          View Team\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" data-testid={`button-invite-${team.id}`}>\n                          <Mail className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle>All Team Members</CardTitle>\n                <CardDescription>\n                  Everyone across all teams in your organization\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {mockUsers.map(user => (\n                    <div key={user.id} className=\"flex items-center justify-between p-3 border border-jira-gray-200 rounded-lg hover:bg-jira-gray-50\">\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={user.avatarUrl} alt={user.name} />\n                          <AvatarFallback className=\"bg-jira-blue text-white\">\n                            {user.initials}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium text-jira-gray-900\">{user.name}</p>\n                          <p className=\"text-sm text-jira-gray-600\">{user.email}</p>\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-profile-${user.id}`}>\n                        View Profile\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7486},"client/src/pages/YourWork.tsx":{"content":"import JiraHeader from '@/components/JiraHeader';\nimport JiraSidebar from '@/components/JiraSidebar';\nimport { Clock, User, Star, Eye } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { mockIssues, mockUsers } from '@/data/mockData';\nimport { JiraIssue } from '@shared/types';\n\nconst ISSUE_TYPE_CONFIG = {\n  story: { icon: '📖', label: 'Story', color: 'bg-green-100 text-green-800' },\n  bug: { icon: '🐛', label: 'Bug', color: 'bg-red-100 text-red-800' },\n  task: { icon: '✓', label: 'Task', color: 'bg-blue-100 text-blue-800' },\n  epic: { icon: '⚡', label: 'Epic', color: 'bg-purple-100 text-purple-800' },\n};\n\nconst PRIORITY_ICONS = {\n  highest: '🔴',\n  high: '🟠',\n  medium: '🟡',\n  low: '🟢',\n  lowest: '⚪',\n};\n\nfunction IssueRow({ issue }: { issue: JiraIssue }) {\n  return (\n    <div\n      className=\"p-4 border border-jira-gray-200 rounded-lg hover:shadow-sm transition-shadow bg-white cursor-pointer\"\n      data-testid={`issue-${issue.key}`}\n    >\n      <div className=\"flex items-start gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <span className=\"text-sm font-medium text-jira-blue\">{issue.key}</span>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {ISSUE_TYPE_CONFIG[issue.type].label}\n            </Badge>\n            <span className=\"text-sm\">{PRIORITY_ICONS[issue.priority]}</span>\n          </div>\n          <h4 className=\"font-medium text-jira-gray-900 mb-2\">{issue.summary}</h4>\n          <div className=\"flex items-center gap-3 text-sm text-jira-gray-600\">\n            <span>{issue.project.name}</span>\n            <span>•</span>\n            <span className=\"capitalize\">{issue.status.replace('-', ' ')}</span>\n            {issue.labels.length > 0 && (\n              <>\n                <span>•</span>\n                <div className=\"flex gap-1\">\n                  {issue.labels.slice(0, 2).map(label => (\n                    <Badge key={label} variant=\"secondary\" className=\"text-xs\">\n                      {label}\n                    </Badge>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        {issue.assignee && (\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={issue.assignee.avatarUrl} alt={issue.assignee.name} />\n            <AvatarFallback className=\"bg-jira-blue text-white text-xs\">\n              {issue.assignee.initials}\n            </AvatarFallback>\n          </Avatar>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function YourWork() {\n  const currentUser = mockUsers[0];\n  \n  // Filter issues for different views\n  const workedOnIssues = mockIssues;\n  const assignedIssues = mockIssues.filter(issue => issue.assignee?.id === currentUser.id);\n  const viewedIssues = mockIssues.slice(0, 3); // Recent viewed\n  const starredIssues = mockIssues.slice(0, 2); // Starred\n\n  return (\n    <div className=\"h-screen bg-jira-gray-50 flex flex-col overflow-hidden\">\n      <JiraHeader />\n      \n      <div className=\"flex flex-1 overflow-hidden\">\n        <JiraSidebar />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-6xl mx-auto p-6\">\n            <div className=\"mb-6\">\n              <h1 className=\"text-2xl font-semibold text-jira-gray-900 mb-2\" data-testid=\"text-your-work-title\">\n                Your Work\n              </h1>\n              <p className=\"text-sm text-jira-gray-600\">\n                View and manage all your assigned tasks and recently viewed issues\n              </p>\n            </div>\n\n            <Tabs defaultValue=\"worked-on\" className=\"w-full\">\n              <TabsList className=\"mb-6\" data-testid=\"tabs-your-work\">\n                <TabsTrigger value=\"worked-on\" data-testid=\"tab-worked-on\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Worked on\n                </TabsTrigger>\n                <TabsTrigger value=\"assigned\" data-testid=\"tab-assigned\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Assigned to me\n                </TabsTrigger>\n                <TabsTrigger value=\"viewed\" data-testid=\"tab-viewed\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Viewed\n                </TabsTrigger>\n                <TabsTrigger value=\"starred\" data-testid=\"tab-starred\">\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Starred\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"worked-on\" className=\"space-y-3\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-sm font-medium text-jira-gray-700 mb-2\">\n                    Recently updated issues you've worked on\n                  </h3>\n                </div>\n                {workedOnIssues.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Clock className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No recent work</p>\n                  </div>\n                ) : (\n                  workedOnIssues.map(issue => (\n                    <IssueRow key={issue.id} issue={issue} />\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"assigned\" className=\"space-y-3\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-sm font-medium text-jira-gray-700 mb-2\">\n                    Issues currently assigned to you ({assignedIssues.length})\n                  </h3>\n                </div>\n                {assignedIssues.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <User className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No issues assigned to you</p>\n                  </div>\n                ) : (\n                  assignedIssues.map(issue => (\n                    <IssueRow key={issue.id} issue={issue} />\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"viewed\" className=\"space-y-3\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-sm font-medium text-jira-gray-700 mb-2\">\n                    Issues you've recently viewed\n                  </h3>\n                </div>\n                {viewedIssues.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Eye className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No recently viewed issues</p>\n                  </div>\n                ) : (\n                  viewedIssues.map(issue => (\n                    <IssueRow key={issue.id} issue={issue} />\n                  ))\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"starred\" className=\"space-y-3\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-sm font-medium text-jira-gray-700 mb-2\">\n                    Issues you've starred for quick access\n                  </h3>\n                </div>\n                {starredIssues.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Star className=\"h-12 w-12 text-jira-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-jira-gray-600\">No starred issues yet</p>\n                    <p className=\"text-sm text-jira-gray-500 mt-2\">\n                      Star issues to quickly find them here\n                    </p>\n                  </div>\n                ) : (\n                  starredIssues.map(issue => (\n                    <IssueRow key={issue.id} issue={issue} />\n                  ))\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8047},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/utils/startup.ts":{"content":"// Utility functions for startup overlay\n\nexport const resetStartupOverlay = () => {\n  localStorage.removeItem('jira-startup-seen');\n  window.location.reload();\n};\n\nexport const hasSeenStartup = () => {\n  return localStorage.getItem('jira-startup-seen') === 'true';\n};\n\n// Add to window for easy access in console\nif (typeof window !== 'undefined') {\n  (window as any).resetStartupOverlay = resetStartupOverlay;\n}\n","size_bytes":414},"client/src/components/examples/BoardHeader.tsx":{"content":"import BoardHeader from '../BoardHeader';\n\nexport default function BoardHeaderExample() {\n  return (\n    <div className=\"w-full\">\n      <BoardHeader />\n    </div>\n  );\n}","size_bytes":169},"client/src/components/examples/CreateIssueModal.tsx":{"content":"import { useState } from 'react';\nimport CreateIssueModal from '../CreateIssueModal';\nimport { Button } from '@/components/ui/button';\nimport { mockProjects } from '@/data/mockData';\n\nexport default function CreateIssueModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleCreateIssue = (issue: any) => {\n    console.log('New issue created:', issue);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <Button onClick={() => setIsOpen(true)}>\n        Open Create Issue Modal\n      </Button>\n      \n      <CreateIssueModal \n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        onCreateIssue={handleCreateIssue}\n        defaultProject={mockProjects[0]}\n      />\n    </div>\n  );\n}","size_bytes":752},"client/src/components/examples/IssueCard.tsx":{"content":"import IssueCard from '../IssueCard';\nimport { mockIssues } from '@/data/mockData';\n\nexport default function IssueCardExample() {\n  const sampleIssue = mockIssues[0]; // Story with assignee\n  const bugIssue = mockIssues[2]; // Bug with highest priority\n  const unassignedIssue = mockIssues[4]; // Unassigned issue\n\n  return (\n    <div className=\"w-80 space-y-4 p-4\">\n      <IssueCard issue={sampleIssue} />\n      <IssueCard issue={bugIssue} />\n      <IssueCard issue={unassignedIssue} />\n    </div>\n  );\n}","size_bytes":505},"client/src/components/examples/IssueModal.tsx":{"content":"import { useState } from 'react';\nimport IssueModal from '../IssueModal';\nimport { Button } from '@/components/ui/button';\nimport { mockIssues } from '@/data/mockData';\n\nexport default function IssueModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIssue, setSelectedIssue] = useState(mockIssues[0]);\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"space-x-2\">\n        <Button onClick={() => { setSelectedIssue(mockIssues[0]); setIsOpen(true); }}>\n          Open Story Issue\n        </Button>\n        <Button onClick={() => { setSelectedIssue(mockIssues[2]); setIsOpen(true); }}>\n          Open Bug Issue\n        </Button>\n      </div>\n      \n      <IssueModal \n        issue={selectedIssue}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      />\n    </div>\n  );\n}","size_bytes":836},"client/src/components/examples/JiraHeader.tsx":{"content":"import JiraHeader from '../JiraHeader';\n\nexport default function JiraHeaderExample() {\n  return <JiraHeader />;\n}","size_bytes":113},"client/src/components/examples/JiraSidebar.tsx":{"content":"import JiraSidebar from '../JiraSidebar';\n\nexport default function JiraSidebarExample() {\n  return (\n    <div className=\"h-screen\">\n      <JiraSidebar />\n    </div>\n  );\n}","size_bytes":171},"client/src/components/examples/KanbanBoard.tsx":{"content":"import KanbanBoard from '../KanbanBoard';\nimport { mockKanbanColumns } from '@/data/mockData';\n\nexport default function KanbanBoardExample() {\n  return (\n    <div className=\"h-screen bg-white\">\n      <KanbanBoard columns={mockKanbanColumns} />\n    </div>\n  );\n}","size_bytes":261},"client/src/components/stepper/stepper.tsx":{"content":"import React, { useState, Children, useRef, useLayoutEffect, HTMLAttributes, ReactNode } from 'react';\nimport { motion, AnimatePresence, Variants } from 'motion/react';\n\ninterface StepperProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  initialStep?: number;\n  onStepChange?: (step: number) => void;\n  onFinalStepCompleted?: () => void;\n  stepCircleContainerClassName?: string;\n  stepContainerClassName?: string;\n  contentClassName?: string;\n  footerClassName?: string;\n  backButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\n  nextButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\n  backButtonText?: string;\n  nextButtonText?: string;\n  disableStepIndicators?: boolean;\n  renderStepIndicator?: (props: {\n    step: number;\n    currentStep: number;\n    onStepClick: (clicked: number) => void;\n  }) => ReactNode;\n}\n\nexport default function Stepper({\n  children,\n  initialStep = 1,\n  onStepChange = () => {},\n  onFinalStepCompleted = () => {},\n  stepCircleContainerClassName = '',\n  stepContainerClassName = '',\n  contentClassName = '',\n  footerClassName = '',\n  backButtonProps = {},\n  nextButtonProps = {},\n  backButtonText = 'Back',\n  nextButtonText = 'Continue',\n  disableStepIndicators = false,\n  renderStepIndicator,\n  ...rest\n}: StepperProps) {\n  const [currentStep, setCurrentStep] = useState<number>(initialStep);\n  const [direction, setDirection] = useState<number>(0);\n  const stepsArray = Children.toArray(children);\n  const totalSteps = stepsArray.length;\n  const isCompleted = currentStep > totalSteps;\n  const isLastStep = currentStep === totalSteps;\n\n  const updateStep = (newStep: number) => {\n    setCurrentStep(newStep);\n    if (newStep > totalSteps) {\n      onFinalStepCompleted();\n    } else {\n      onStepChange(newStep);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setDirection(-1);\n      updateStep(currentStep - 1);\n    }\n  };\n\n  const handleNext = () => {\n    if (!isLastStep) {\n      setDirection(1);\n      updateStep(currentStep + 1);\n    }\n  };\n\n  const handleComplete = () => {\n    setDirection(1);\n    updateStep(totalSteps + 1);\n  };\n\n  return (\n    <div\n      className=\"flex min-h-full flex-1 flex-col items-center justify-center p-4 sm:aspect-[4/3] md:aspect-[2/1]\"\n      {...rest}\n    >\n      <div\n        className={`mx-auto w-full max-w-md rounded-4xl shadow-xl ${stepCircleContainerClassName}`}\n        style={{ border: '1px solid #222' }}\n      >\n        <div className={`${stepContainerClassName} flex w-full items-center p-8`}>\n          {stepsArray.map((_, index) => {\n            const stepNumber = index + 1;\n            const isNotLastStep = index < totalSteps - 1;\n            return (\n              <React.Fragment key={stepNumber}>\n                {renderStepIndicator ? (\n                  renderStepIndicator({\n                    step: stepNumber,\n                    currentStep,\n                    onStepClick: clicked => {\n                      setDirection(clicked > currentStep ? 1 : -1);\n                      updateStep(clicked);\n                    }\n                  })\n                ) : (\n                  <StepIndicator\n                    step={stepNumber}\n                    disableStepIndicators={disableStepIndicators}\n                    currentStep={currentStep}\n                    onClickStep={clicked => {\n                      setDirection(clicked > currentStep ? 1 : -1);\n                      updateStep(clicked);\n                    }}\n                  />\n                )}\n                {isNotLastStep && <StepConnector isComplete={currentStep > stepNumber} />}\n              </React.Fragment>\n            );\n          })}\n        </div>\n\n        <StepContentWrapper\n          isCompleted={isCompleted}\n          currentStep={currentStep}\n          direction={direction}\n          className={`space-y-2 px-8 ${contentClassName}`}\n        >\n          {stepsArray[currentStep - 1]}\n        </StepContentWrapper>\n\n        {!isCompleted && (\n          <div className={`px-8 pb-8 ${footerClassName}`}>\n            <div className={`mt-10 flex ${currentStep !== 1 ? 'justify-between' : 'justify-end'}`}>\n              {currentStep !== 1 && (\n                <button\n                  onClick={handleBack}\n                  className={`duration-350 rounded px-2 py-1 transition ${\n                    currentStep === 1\n                      ? 'pointer-events-none opacity-50 text-neutral-400'\n                      : 'text-neutral-400 hover:text-neutral-700'\n                  }`}\n                  {...backButtonProps}\n                >\n                  {backButtonText}\n                </button>\n              )}\n              <button\n                onClick={isLastStep ? handleComplete : handleNext}\n                className=\"duration-350 flex items-center justify-center rounded-full bg-green-500 py-1.5 px-3.5 font-medium tracking-tight text-white transition hover:bg-green-600 active:bg-green-700\"\n                {...nextButtonProps}\n              >\n                {isLastStep ? 'Complete' : nextButtonText}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface StepContentWrapperProps {\n  isCompleted: boolean;\n  currentStep: number;\n  direction: number;\n  children: ReactNode;\n  className?: string;\n}\n\nfunction StepContentWrapper({\n  isCompleted,\n  currentStep,\n  direction,\n  children,\n  className = ''\n}: StepContentWrapperProps) {\n  const [parentHeight, setParentHeight] = useState<number>(0);\n\n  return (\n    <motion.div\n      style={{ position: 'relative', overflow: 'hidden' }}\n      animate={{ height: isCompleted ? 0 : parentHeight }}\n      transition={{ type: 'spring', duration: 0.4 }}\n      className={className}\n    >\n      <AnimatePresence initial={false} mode=\"sync\" custom={direction}>\n        {!isCompleted && (\n          <SlideTransition key={currentStep} direction={direction} onHeightReady={h => setParentHeight(h)}>\n            {children}\n          </SlideTransition>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}\n\ninterface SlideTransitionProps {\n  children: ReactNode;\n  direction: number;\n  onHeightReady: (height: number) => void;\n}\n\nfunction SlideTransition({ children, direction, onHeightReady }: SlideTransitionProps) {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      onHeightReady(containerRef.current.offsetHeight);\n    }\n  }, [children, onHeightReady]);\n\n  return (\n    <motion.div\n      ref={containerRef}\n      custom={direction}\n      variants={stepVariants}\n      initial=\"enter\"\n      animate=\"center\"\n      exit=\"exit\"\n      transition={{ duration: 0.4 }}\n      style={{ position: 'absolute', left: 0, right: 0, top: 0 }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nconst stepVariants: Variants = {\n  enter: (dir: number) => ({\n    x: dir >= 0 ? '-100%' : '100%',\n    opacity: 0\n  }),\n  center: {\n    x: '0%',\n    opacity: 1\n  },\n  exit: (dir: number) => ({\n    x: dir >= 0 ? '50%' : '-50%',\n    opacity: 0\n  })\n};\n\ninterface StepProps {\n  children: ReactNode;\n}\n\nexport function Step({ children }: StepProps) {\n  return <div className=\"px-8\">{children}</div>;\n}\n\ninterface StepIndicatorProps {\n  step: number;\n  currentStep: number;\n  onClickStep: (clicked: number) => void;\n  disableStepIndicators?: boolean;\n}\n\nfunction StepIndicator({ step, currentStep, onClickStep, disableStepIndicators = false }: StepIndicatorProps) {\n  const status = currentStep === step ? 'active' : currentStep < step ? 'inactive' : 'complete';\n\n  const handleClick = () => {\n    if (step !== currentStep && !disableStepIndicators) {\n      onClickStep(step);\n    }\n  };\n\n  return (\n    <motion.div\n      onClick={handleClick}\n      className=\"relative cursor-pointer outline-none focus:outline-none\"\n      animate={status}\n      initial={false}\n    >\n      <motion.div\n        variants={{\n          inactive: { scale: 1, backgroundColor: '#222', color: '#a3a3a3' },\n          active: { scale: 1, backgroundColor: '#5227FF', color: '#5227FF' },\n          complete: { scale: 1, backgroundColor: '#5227FF', color: '#3b82f6' }\n        }}\n        transition={{ duration: 0.3 }}\n        className=\"flex h-8 w-8 items-center justify-center rounded-full font-semibold\"\n      >\n        {status === 'complete' ? (\n          <CheckIcon className=\"h-4 w-4 text-black\" />\n        ) : status === 'active' ? (\n          <div className=\"h-3 w-3 rounded-full bg-[#060010]\" />\n        ) : (\n          <span className=\"text-sm\">{step}</span>\n        )}\n      </motion.div>\n    </motion.div>\n  );\n}\n\ninterface StepConnectorProps {\n  isComplete: boolean;\n}\n\nfunction StepConnector({ isComplete }: StepConnectorProps) {\n  const lineVariants: Variants = {\n    incomplete: { width: 0, backgroundColor: 'transparent' },\n    complete: { width: '100%', backgroundColor: '#5227FF' }\n  };\n\n  return (\n    <div className=\"relative mx-2 h-0.5 flex-1 overflow-hidden rounded bg-neutral-600\">\n      <motion.div\n        className=\"absolute left-0 top-0 h-full\"\n        variants={lineVariants}\n        initial={false}\n        animate={isComplete ? 'complete' : 'incomplete'}\n        transition={{ duration: 0.4 }}\n      />\n    </div>\n  );\n}\n\ninterface CheckIconProps extends React.SVGProps<SVGSVGElement> {}\n\nfunction CheckIcon(props: CheckIconProps) {\n  return (\n    <svg {...props} fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\">\n      <motion.path\n        initial={{ pathLength: 0 }}\n        animate={{ pathLength: 1 }}\n        transition={{\n          delay: 0.1,\n          type: 'tween',\n          ease: 'easeOut',\n          duration: 0.3\n        }}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M5 13l4 4L19 7\"\n      />\n    </svg>\n  );\n}\n","size_bytes":9790},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-white p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7613},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-white p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1278},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-white text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5739},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}